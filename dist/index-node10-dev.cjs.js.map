{"version":3,"file":"index-node10-dev.cjs.js","sources":["../src/mongo.ts","../src/views/Layout.tsx","../src/auth/github.ts","../src/app/auth.tsx","../src/app/repository.tsx","../src/app/home.tsx","../src/events/account-handlers/actions/syncTeams.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/app/org-settings.tsx","../src/events/account-handlers/actions/syncUser.ts","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/events/pr-handlers/utils/fetchPr.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/utils/Excludes.ts","../src/context/initRepoLabels.ts","../src/context/utils.ts","../src/context/voidTeamSlack.ts","../src/context/initTeamSlack.ts","../src/context/getOrCreateAccount.ts","../src/context/accountContext.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/closed.ts","../src/events/pr-handlers/reopened.ts","../src/slack/utils.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/synchronize.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/events/pr-handlers/status.ts","../src/events/account-handlers/utils/handler.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { MongoStore, MongoConnection, MongoBaseModel } from 'liwi-mongo';\nimport { SlackMessage } from './context/SlackMessage';\nimport { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\ntype AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\n// TODO _id is number\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\nexport interface Org extends BaseAccount {\n  slackToken?: string;\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: { id: string };\n}\n\nexport interface OrgTeam extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string;\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB as string],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD as string);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: React.ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps) {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>{children}</div>\n      </body>\n    </html>\n  );\n}\n","import { create } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = create({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import { promisify } from 'util';\nimport { Octokit } from 'probot';\nimport type { Router, Request, Response } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { sign, verify } from 'jsonwebtoken';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  const authInfo = await readAuthCookie(req, strategy);\n\n  if (authInfo?.id) {\n    return authInfo;\n  }\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{ authInfo: AuthInfo; api: Octokit } | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  return {\n    authInfo,\n    api: new Octokit({ auth: `token ${authInfo.accessToken}` }),\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get('/login', async (req: Request, res: Response) => {\n    if (await getAuthInfoFromCookie(req, res)) {\n      return res.redirect('/app');\n    }\n\n    // const state = await randomHex(8);\n    // res.cookie(`auth_${strategy}_${state}`, strategy, {\n    //   maxAge: 10 * 60 * 1000,\n    //   httpOnly: true,\n    //   secure,\n    // });\n\n    const redirectUri = githubAuth.oauth2.authorizationCode.authorizeURL({\n      redirect_uri: createRedirectUri(req),\n      scope: 'read:user,repo',\n      // state,\n      // grant_type: options.grantType,\n      // access_type: options.accessType,\n      // login_hint: req.query.loginHint,\n      // include_granted_scopes: options.includeGrantedScopes,\n    });\n\n    // console.log(redirectUri);\n\n    res.redirect(redirectUri);\n  });\n\n  router.get('/login-response', async (req, res) => {\n    if (req.query.error) {\n      res.send(req.query.error_description);\n      return;\n    }\n\n    const strategy = 'gh';\n    const code: string = req.query.code as string;\n    // const state = req.query.state;\n    // const cookieName = `auth_${strategy}_${state}`;\n    // const cookie = req.cookies && req.cookies[cookieName];\n    // if (!cookie) {\n    //   // res.redirect(`/${strategy}/login`);\n    //   res.send(\n    //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n    //   );\n    //   return;\n    // }\n    // res.clearCookie(cookieName);\n\n    const result = await githubAuth.oauth2.authorizationCode.getToken({\n      code,\n      redirect_uri: createRedirectUri(req),\n    });\n\n    if (!result) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              Could not get access token. <a href=\"/app/login\">Retry ?</a>\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const accessToken = result.access_token;\n    const octokit = new Octokit({ auth: `token ${accessToken}` });\n    const user = await octokit.users.getAuthenticated({});\n    const id = user.data.id;\n    const login = user.data.login;\n\n    const authInfo: AuthInfo = { id, login, accessToken, time: Date.now() };\n    const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n      algorithm: 'HS512',\n      audience: req.headers['user-agent'],\n      expiresIn: '10 days',\n    });\n\n    res.cookie(`auth_${strategy}`, token, {\n      httpOnly: true,\n      secure,\n    });\n\n    res.redirect('/app');\n  });\n}\n","import type { Router } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { GitHubAPI } from 'probot/lib/github';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(router: Router, api: GitHubAPI): void {\n  router.get('/repositories', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.list({ per_page: 100 });\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>Your repositories</h4>\n            <ul>\n              {data.map((repo: any) => (\n                <li key={repo.id}>\n                  <a href={`/app/repository/${repo.owner.login}/${repo.name}`}>\n                    {repo.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n\n            {data.length === 100 && (\n              <div>We currently have a limit to 100 repositories</div>\n            )}\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.get('/repository/:owner/:repository', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.get({\n      owner: req.params.owner,\n      repo: req.params.repository,\n    });\n\n    if (!data) {\n      res.status(404).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>repo not found</div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    if (!data.permissions.admin) {\n      res.status(401).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              not authorized to see this repo, you need to have admin permission\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const { data: data2 } = await api.apps\n      .getRepoInstallation({\n        owner: req.params.owner,\n        repo: req.params.repository,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!data2) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed on this repo. Go to \"}\n              <a\n                href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to add it.\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>{req.params.repository}</h4>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import type { Router } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { GitHubAPI } from 'probot/lib/github';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  api: GitHubAPI,\n  mongoStores: MongoStores,\n): void {\n  router.get('/', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Choose your account</h4>\n                <ul>\n                  <li>\n                    <a href=\"/app/user\">{user.authInfo.login}</a>\n                  </li>\n                  {orgs.data.map((org) => (\n                    <li key={org.id}>\n                      <a href={`/app/org/${org.login}`}>{org.login}</a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import { Octokit } from 'probot';\nimport { MongoStores } from '../../../mongo';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamIds: number[] = [];\n\n  await Promise.all(\n    await github.paginate(\n      github.teams.list.endpoint.merge({\n        org: org.login,\n      }),\n      ({ data }: Octokit.Response<Octokit.TeamsListResponse>) => {\n        return Promise.all(\n          data.map((team) => {\n            teamIds.push(team.id);\n            return mongoStores.orgTeams.upsertOne({\n              _id: team.id as any, // TODO _id number\n              org: orgEmbed,\n              name: team.name,\n              slug: team.slug,\n              description: team.description,\n            });\n          }),\n        );\n      },\n    ),\n  );\n\n  await mongoStores.orgTeams.deleteMany({\n    'org.id': org.id,\n    _id: { $not: { $in: teamIds } },\n  });\n};\n","import { Octokit } from 'probot';\nimport { MongoStores, Org } from '../../../mongo';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id as any, // TODO _id is number\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  await Promise.all(\n    await github.paginate(\n      github.orgs.listMembers.endpoint.merge({\n        org: org.login,\n      }),\n      ({ data }: Octokit.Response<Octokit.OrgsListMembersResponse>) => {\n        return Promise.all(\n          data.map(async (member) => {\n            memberIds.push(member.id);\n            return Promise.all([\n              mongoStores.orgMembers.upsertOne({\n                _id: `${org.id}_${member.id}`,\n                org: orgEmbed,\n                user: {\n                  id: member.id,\n                  login: member.login,\n                },\n              }),\n              mongoStores.users.upsertOne({\n                _id: member.id as any,\n                login: member.login,\n                type: member.type,\n              }),\n            ]);\n          }),\n        );\n      },\n    ),\n  );\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","import { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: true,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n      {\n        bot: false,\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        error: {\n          title: 'Title does not have JIRA issue',\n          summary: 'The PR title should end with ONK-0000, or [no issue]',\n        },\n        status: 'jira-issue',\n        statusInfoFromMatch: (match) => {\n          const issue = match[1];\n          if (issue === '[no issue]') {\n            return {\n              title: 'No issue',\n              summary: '',\n            };\n          }\n          return {\n            inBody: true,\n            url: `https://ornikar.atlassian.net/browse/${issue}`,\n            title: `JIRA issue: ${issue}`,\n            summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {\n      /* ops */\n      JulienBreux: `julien.breux${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Alan-pad': null,\n      CamilSadiki: null,\n      busser: null,\n\n      /* back */\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      arthurflachs: `arthur${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Thierry-girod': `thierry${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      darame07: `kevin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Pixy: `pierre-alexis${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Radyum: `romain.reynaud${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* front */\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      LentnerStefan: `stefan${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      vlbr: `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'budet-b': `benjamin.budet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      mdcarter: `maxime.dehaye${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      ChibiBlasphem: `christopher${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Lenamari: `lena${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'AlexisRiols-Ornikar': `alexis.riols${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n  },\n\n  teams: {\n    ops: {\n      logins: ['JulienBreux', 'Alan-pad', 'CamilSadiki', 'busser'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'Radyum',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?(!)?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config } from './types';\nimport chrisconfig from './christophehurpeau';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n};\nexport default config;\n","import { Config as ConfigType } from './types';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport christophehurpeau from './christophehurpeau';\nimport reviewflow from './reviewflow';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: { [owner: string]: Config } = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","import { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { MongoStores } from '../mongo';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import type { Router } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { GitHubAPI } from 'probot/lib/github';\nimport bodyParser from 'body-parser';\nimport { syncTeams } from '../events/account-handlers/actions/syncTeams';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { accountConfigs } from '../accountConfigs';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  api: GitHubAPI,\n  mongoStores: MongoStores,\n): void {\n  router.get('/org/:org/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const o = await mongoStores.orgs.findByKey(org.id);\n    if (!o) return res.redirect('/app');\n\n    await syncOrg(mongoStores, user.api, o.installationId as number, org);\n    await syncTeams(mongoStores, user.api, org);\n\n    res.redirect(`/app/org/${req.params.org}`);\n  });\n\n  router.get('/org/:org', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const installation = await api.apps\n      .getOrgInstallation({ org: org.login })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    const accountConfig = accountConfigs[org.login];\n    const userDmSettings = await getUserDmSettings(\n      mongoStores,\n      org.login,\n      org.id,\n      user.authInfo.id,\n    );\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n              <a href=\"/app\">Switch account</a>\n            </div>\n\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Information</h4>\n                {!accountConfig\n                  ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                  : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n              </div>\n              <div style={{ width: '380px' }}>\n                <h4>My DM Settings</h4>\n                {Object.entries(dmMessages).map(([key, name]) => (\n                  <div key={key}>\n                    <label htmlFor={key}>\n                      <span\n                        // eslint-disable-next-line react/no-danger\n                        dangerouslySetInnerHTML={{\n                          __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                            userDmSettings[key as MessageCategory]\n                              ? 'checked=\"checked\" '\n                              : ''\n                          }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                        }}\n                      />\n                      {name}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res) => {\n    if (!req.body) {\n      res.status(400).send('not ok');\n      return;\n    }\n\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    (await mongoStores.userDmSettings.collection).updateOne(\n      {\n        _id: `${org.id}_${user.authInfo.id}`,\n      },\n      {\n        $set: {\n          [`settings.${req.body.key}`]: req.body.value,\n          updated: new Date(),\n        },\n        $setOnInsert: {\n          orgId: org.id,\n          userId: user.authInfo.id,\n          created: new Date(),\n        },\n      },\n      { upsert: true },\n    );\n\n    const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n      orgId: org.id,\n      userId: user.authInfo.id,\n    });\n\n    if (userDmSettingsConfig) {\n      updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n    }\n\n    res.send('ok');\n  });\n}\n","import { Octokit } from 'probot';\nimport { MongoStores, User } from '../../../mongo';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import type { Router } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { GitHubAPI } from 'probot/lib/github';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  api: GitHubAPI,\n  mongoStores: MongoStores,\n): void {\n  router.get('/user/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    // const { data: installation } = await api.apps\n    //   .getUserInstallation({\n    //     username: user.authInfo.login,\n    //   })\n    //   .catch((err) => {\n    //     return { status: err.status, data: undefined };\n    //   });\n\n    // console.log(installation);\n\n    const u = await mongoStores.users.findByKey(user.authInfo.id);\n    if (!u || !u.installationId) return res.redirect('/app');\n\n    await syncUser(\n      mongoStores,\n      user.api,\n      u.installationId as number,\n      user.authInfo,\n    );\n\n    res.redirect(`/app/user`);\n  });\n\n  router.get('/user', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const { data: installation } = await api.apps\n      .getUserInstallation({\n        username: user.authInfo.login,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    return res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>{process.env.REVIEWFLOW_NAME} is installed for this user</div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import { Application } from 'probot';\nimport cookieParser from 'cookie-parser';\nimport { AppContext } from './context/AppContext';\nimport repository from './app/repository';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport userSettings from './app/user-settings';\n\nexport default async function appRouter(\n  app: Application,\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = app.route('/app');\n  const api = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, api);\n  home(router, api, mongoStores);\n  orgSettings(router, api, mongoStores);\n  userSettings(router, api, mongoStores);\n}\n","import { Context, Octokit } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<Octokit.PullsGetResponse> => {\n  const prResult = await context.github.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","export type Options = Record<OptionsKeys, boolean>;\n\nexport type OptionsKeys =\n  | 'featureBranch'\n  | 'autoMergeWithSkipCi'\n  | 'autoMerge'\n  | 'deleteAfterMerge';\n\nexport const options: OptionsKeys[] = [\n  'featureBranch',\n  'autoMergeWithSkipCi',\n  'autoMerge',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\nexport const optionsLabels: { key: OptionsKeys; label: string }[] = [\n  { key: 'featureBranch', label: 'This PR is a feature branch' },\n  {\n    key: 'autoMergeWithSkipCi',\n    label: 'Add `[skip ci]` on merge commit',\n  },\n  {\n    key: 'autoMerge',\n    label:\n      'Auto merge when this PR is ready and has no failed statuses. (Also has a queue per repo to prevent multiple useless \"Update branch\" triggers)',\n  },\n  {\n    key: 'deleteAfterMerge',\n    label: 'Automatic branch delete after this PR is merged',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  return optionsRegexps.reduce((acc, { key, regexp }) => {\n    const match = regexp.exec(content);\n    acc[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n    return acc;\n  }, {} as any) as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import { StatusInfo } from 'accountConfigs/types';\nimport { Options, parseOptions } from './parseBody';\nimport { optionsLabels } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (options: Options) => {\n  return optionsLabels\n    .map(\n      ({ key, label }) =>\n        `- [${options[key] ? 'x' : ' '}] <!-- reviewflow-${key} -->${label}`,\n    )\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length !== 0\n    ? `#### Infos:\\n${toMarkdownInfos(infos)}\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos('', defaultOptions, infos);\n};\n\nexport const updateCommentOptions = (\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(commentBody, updatedOptions),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?(#### Options:.*)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*)?(#### Options:)/s,\n    // eslint-disable-next-line no-nested-ternary\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (prBody: string): string => {\n  return prBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    // eslint-disable-next-line no-nested-ternary\n    '$1$3',\n  );\n};\n","import { Context, Octokit } from 'probot';\nimport { PullRequestData } from './PullRequestData';\n\nexport const createReviewflowComment = <T, U extends PullRequestData>(\n  context: Context<T>,\n  pr: U,\n  body: string,\n): Promise<Octokit.IssuesCreateCommentResponse> => {\n  return context.github.issues\n    .createComment(context.repo({ issue_number: pr.number, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T, U extends PullRequestData>(\n  context: Context<T>,\n  pr: U,\n  commentId: number,\n): Promise<Octokit.IssuesGetCommentResponse | null> => {\n  return context.github.issues\n    .getComment(\n      context.repo({\n        issue_number: pr.number,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import { Context, Octokit } from 'probot';\nimport { AppContext } from 'context/AppContext';\nimport { ReviewflowPr } from 'mongo';\nimport { RepoContext } from 'context/repoContext';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport { fetchPr } from './fetchPr';\nimport { PullRequestData, PullRequestFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface PrContext<T extends PullRequestData = PullRequestData> {\n  appContext: AppContext;\n  repoContext: RepoContext;\n  pr: T;\n  updatedPr: null | Octokit.PullsGetResponse;\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport interface PrContextWithUpdatedPr<\n  T extends PullRequestData = PullRequestData\n> extends PrContext<T> {\n  updatedPr: Octokit.PullsGetResponse;\n}\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nconst getReviewflowPr = async <T, U extends PullRequestData>(\n  appContext: AppContext,\n  repoContext: RepoContext,\n  context: Context<T>,\n  pr: U,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<{ reviewflowPr: ReviewflowPr; commentBody: string }> => {\n  const prEmbed = { number: pr.number };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pr.number,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(context, pr, existing.commentId));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      context,\n      pr,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body };\n};\n\nexport const createPullRequestContextFromWebhook = async <\n  T,\n  U extends PullRequestFromWebhook\n>(\n  appContext: AppContext,\n  repoContext: RepoContext,\n  context: Context<T>,\n  pr: U,\n  options: CreatePrContextOptions,\n): Promise<PrContext<U>> => {\n  if (repoContext.shouldIgnore) {\n    return {\n      appContext,\n      repoContext,\n      pr,\n      reviewflowPr: null as any, // TODO fix typings to allow null\n      commentBody: '',\n      updatedPr: null,\n    };\n  }\n  const { reviewflowPr, commentBody } = await getReviewflowPr(\n    appContext,\n    repoContext,\n    context,\n    pr,\n    options.reviewflowCommentPromise,\n  );\n\n  return {\n    appContext,\n    repoContext,\n    pr,\n    reviewflowPr,\n    commentBody,\n    updatedPr: null,\n  };\n};\n\nexport const createPullRequestContextFromPullResponse = async <T>(\n  appContext: AppContext,\n  repoContext: RepoContext,\n  context: Context<T>,\n  pr: Octokit.PullsGetResponse,\n  options: CreatePrContextOptions,\n): Promise<PrContextWithUpdatedPr<Octokit.PullsGetResponse>> => {\n  console.log('createPullRequestContextFromPullResponse', pr.number);\n  const { reviewflowPr, commentBody } = await getReviewflowPr(\n    appContext,\n    repoContext,\n    context,\n    pr,\n    options.reviewflowCommentPromise,\n  );\n\n  return {\n    appContext,\n    repoContext,\n    pr,\n    reviewflowPr,\n    commentBody,\n    updatedPr: pr,\n  };\n};\n\nexport const fetchPullRequestAndCreateContext = async <\n  T,\n  U extends PullRequestFromWebhook\n>(\n  context: Context<T>,\n  prContext: PrContext<U>,\n): Promise<PrContextWithUpdatedPr<U>> => {\n  const updatedPr = await fetchPr(context, prContext.pr.number);\n  return {\n    ...prContext,\n    updatedPr,\n  };\n};\n","import { Octokit } from 'probot';\nimport { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: Octokit.PullsGetResponse['labels'],\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import { Context, Octokit } from 'probot';\nimport Webhooks from '@octokit/webhooks';\nimport { AutomergeLog } from 'mongo';\nimport { AppContext } from 'context/AppContext';\nimport { RepoContext } from 'context/repoContext';\nimport { LabelResponse } from 'context/initRepoLabels';\nimport {\n  PrContext,\n  PrContextWithUpdatedPr,\n  createPullRequestContextFromPullResponse,\n} from '../utils/createPullRequestContext';\nimport { PullRequestData } from '../utils/PullRequestData';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length !== 0) {\n    context.log.info(`automerge not possible: failed check pr ${pr.id}`, {\n      checks: failedChecks.map((check) => check.name),\n    });\n    return true;\n  }\n\n  const combinedStatus = await context.github.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(`automerge not possible: failed status pr ${pr.id}`, {\n      statuses: failedStatuses.map((status) => status.context),\n    });\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossibleOptionalPrContext = async (\n  appContext: AppContext,\n  repoContext: RepoContext,\n  pr:\n    | Octokit.PullsGetResponse\n    | Webhooks.WebhookPayloadPullRequest['pull_request'],\n  context: Context<any>,\n  prContext?:\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n    | PrContextWithUpdatedPr,\n  prLabels: LabelResponse[] = pr.labels,\n): Promise<boolean> => {\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pr.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pr.id,\n    number: pr.number,\n    branch: pr.head.ref,\n  });\n\n  if (pr.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      'pr is not opened',\n    );\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pr.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pr.id} ${type}`);\n    appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pr.id,\n        number: pr.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pr.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (pr.requested_reviewers.length !== 0) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pr.number)) {\n    context.log.info('automerge not possible: locked pr', {\n      prId: pr.id,\n      prNumber: pr.number,\n    });\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pr.mergeable == null) {\n    const prResult = await context.github.pulls.get(\n      context.repo({\n        pull_number: pr.number,\n      }),\n    );\n    pr = prResult.data;\n  }\n\n  if (pr.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pr.id}, #${pr.number}, mergeable=${pr.mergeable} state=${pr.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pr.mergeable_state === 'clean' ||\n      pr.mergeable_state === 'has_hooks' ||\n      pr.mergeable_state === 'unstable'\n    )\n  ) {\n    if (!pr.mergeable_state || pr.mergeable_state === 'unknown') {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (pr.mergeable_state === 'behind' || pr.mergeable_state === 'dirty') {\n        addLog('rebase-renovate', 'wait');\n\n        // TODO check if has commits not made by renovate https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (pr.body.includes('<!-- rebase-check -->')) {\n          if (pr.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pr.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.github.issues.update(\n            context.repo({\n              issue_number: pr.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pr.title.startsWith('rebase!')) {\n          await context.github.issues.update(\n            context.repo({\n              issue_number: pr.number,\n              title: `rebase!${pr.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pr, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pr.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pr.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pr.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pr.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pr, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pr.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pr.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      context.log.info('automerge not possible: update branch', {\n        head: pr.head.ref,\n        base: pr.base.ref,\n      });\n\n      await context.github.repos.merge({\n        owner: pr.head.repo.owner.login,\n        repo: pr.head.repo.name,\n        head: pr.base.ref,\n        base: pr.head.ref,\n      });\n\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pr.number,\n      `mergeable_state=${pr.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pr.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pr.number}`);\n    if (!prContext)\n      prContext = await createPullRequestContextFromPullResponse(\n        appContext,\n        repoContext,\n        context,\n        pr,\n        {},\n      );\n\n    const parsedBody = parseBody(\n      prContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.github.pulls.merge({\n      merge_method: options.featureBranch ? 'merge' : 'squash',\n      owner: pr.head.repo.owner.login,\n      repo: pr.head.repo.name,\n      pull_number: pr.number,\n      commit_title: options.featureBranch\n        ? undefined\n        : `${pr.title}${options.autoMergeWithSkipCi ? ' [skip ci]' : ''} (#${\n            pr.number\n          })`,\n      commit_message: options.featureBranch ? undefined : '', // TODO add BC\n    });\n    context.log.debug('merge result:', mergeResult.data);\n    repoContext.removePrFromAutomergeQueue(context, pr.number, 'merged');\n    return Boolean(mergeResult.data.merged);\n  } catch (err) {\n    context.log.info('could not merge:', err.message);\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n\nexport const autoMergeIfPossible = async (\n  prContext:\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n    | PrContextWithUpdatedPr,\n  context: Context<any>,\n  prLabels?: LabelResponse[],\n): Promise<boolean> => {\n  const pr:\n    | Octokit.PullsGetResponse\n    | Webhooks.WebhookPayloadPullRequest['pull_request'] =\n    prContext.updatedPr ||\n    (prContext as\n      | PrContext<Octokit.PullsGetResponse>\n      | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>).pr;\n  return autoMergeIfPossibleOptionalPrContext(\n    prContext.appContext,\n    prContext.repoContext,\n    pr,\n    context,\n    prContext,\n    prLabels,\n  );\n};\n","export const ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = (((res: any) => res !== null) as any) as <T>(\n  x: T | null,\n) => x is T;\n","import { Context, Octokit } from 'probot';\nimport { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description: string;\n  color: string;\n  default: boolean;\n}\n\nexport interface Labels {\n  [key: string]: LabelResponse;\n}\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<Octokit.IssuesListLabelsForRepoResponse> => {\n  const { data: labels } = await context.github.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<Labels> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.github.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info('Needs to update label', {\n        current_name: existingLabel.name,\n        name: existingLabel.name !== labelConfig.name && labelConfig.name,\n        color: existingLabel.color !== labelColor && labelColor,\n        description: existingLabel.description !== description && description,\n      });\n\n      const result = await context.github.issues.updateLabel(\n        context.repo({\n          current_name: existingLabel.name,\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Context } from 'probot';\nimport createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n\nexport const contextIssue = <T>(\n  context: Context,\n  object?: T,\n): {\n  owner: string;\n  repo: string;\n  issue_number: number;\n} & T => {\n  const payload = context.payload;\n  return context.repo({\n    ...object,\n    issue_number: (payload.issue || payload.pull_request || payload).number,\n  }) as {\n    owner: string;\n    repo: string;\n    issue_number: number;\n  } & T;\n};\n\nexport const contextPr = <T>(\n  context: Context,\n  object?: T,\n): {\n  owner: string;\n  repo: string;\n  pull_number: number;\n} & T => {\n  const payload = context.payload;\n  return context.repo({\n    ...object,\n    pull_number: (payload.issue || payload.pull_request || payload).number,\n  }) as {\n    owner: string;\n    repo: string;\n    pull_number: number;\n  } & T;\n};\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n});\n","import { WebClient } from '@slack/web-api';\nimport { Context } from 'probot';\nimport { Org, User } from '../mongo';\nimport { getUserDmSettings } from '../dm/getUserDmSettings';\nimport { MessageCategory } from '../dm/MessageCategory';\nimport { Config } from '../accountConfigs';\nimport { getKeys } from './utils';\nimport { AppContext } from './AppContext';\nimport { SlackMessage } from './SlackMessage';\nimport { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const owner = context.payload.repository.owner;\n  const slackToken = 'slackToken' in account && account.slackToken;\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<{\n    [login: string]: string;\n  }>((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const slackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, { member: any; im: any }][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([email, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToMemberId = new Map<string, number>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await slackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile && member.profile.email;\n        if (email && missingEmails.includes(email)) {\n          members.push([email, { member, im: undefined }]);\n          if (memberEmailToMemberId.has(email)) {\n            mongoStores.orgMembers.partialUpdateMany(\n              {\n                _id: memberEmailToMemberId.get(email),\n              },\n              { $set: { slack: { id: member.id } } },\n            );\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: user.member.id,\n      });\n      user.im = im.channel;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string): string => {\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      githubId: number,\n      githubLogin: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug('slack: post message', {\n        category,\n        githubLogin,\n        message,\n      });\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        owner.login,\n        owner.id,\n        githubId,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return null;\n      const result = await slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug('slack: update message', { ts, channel, message });\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const result = await slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (ts: string, channel: string): Promise<void> => {\n      context.log.debug('slack: delete message', { ts, channel });\n      await slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug('slack: add reaction', { ts, channel, name });\n      await slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n\n    updateHome: (githubLogin: string): void => {\n      context.log.debug('update slack home', { githubLogin });\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.github, slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n  };\n};\n","import { Octokit } from 'probot';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeams } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport { Org, User } from '../mongo';\nimport { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeams(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import { Context } from 'probot';\nimport { Lock } from 'lock';\nimport { Org, User, AccountEmbed, AccountType } from '../mongo';\nimport { Config } from '../accountConfigs';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport { initTeamSlack, TeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\nimport { getOrCreateAccount, AccountInfo } from './getOrCreateAccount';\nimport { AppContext } from './AppContext';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountType: AccountType;\n  account: Org | User;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    requestedReviewers: any[],\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock(callback: () => Promise<void> | void): Promise<void>;\n}\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.github,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const slackPromise = initTeamSlack(appContext, context, config, account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  getKeys(config.groups).forEach((groupName) => {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  });\n\n  const githubLoginToTeams = new Map<string, string[]>();\n  getKeys(config.teams || {}).forEach((teamName) => {\n    (config.teams as NonNullable<typeof config.teams>)[teamName].logins.forEach(\n      (login) => {\n        const teams = githubLoginToTeams.get(login);\n        if (teams) {\n          teams.push(teamName);\n        } else {\n          githubLoginToTeams.set(login, [teamName]);\n        }\n      },\n    );\n  });\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    account,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    accountType: accountInfo.type as AccountType,\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info('lock: try to lock account', logInfos);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info('lock: lock account acquired', logInfos);\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info('lock: release account (with error)', logInfos);\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info('lock: release account', logInfos);\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    approveShouldWait: (\n      reviewerGroup,\n      requestedReviewers,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (!reviewerGroup) return false;\n\n      const requestedReviewerGroups = getReviewerGroups(\n        requestedReviewers.map((request) => request.login),\n      );\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return existingAccountContext;\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","import { Lock } from 'lock';\nimport { Context } from 'probot';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { accountConfigs, Config, defaultConfig } from '../accountConfigs';\nimport { GroupLabels } from '../accountConfigs/types';\n// eslint-disable-next-line import/no-cycle\nimport { autoMergeIfPossibleOptionalPrContext } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport { AppContext } from './AppContext';\nimport { initRepoLabels, LabelResponse, Labels } from './initRepoLabels';\nimport { obtainAccountContext, AccountContext } from './accountContext';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: Labels;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: LabelResponse[]) => boolean;\n  hasRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasChangesRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasApprovesReview: (labels: LabelResponse[]) => boolean;\n  getNeedsReviewGroupNames: (labels: LabelResponse[]) => GroupNames[];\n\n  lockPR(\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void>;\n\n  getMergeLockedPr(): LockedMergePr;\n  addMergeLockPr(pr: LockedMergePr): void;\n  removePrFromAutomergeQueue(\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ): void;\n  reschedule(context: Context<any>, pr: LockedMergePr): void;\n  pushAutomergeQueue(pr: LockedMergePr): void;\n}\n\nexport type RepoContext<GroupNames extends string = any> = AccountContext<\n  GroupNames\n> &\n  RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: Labels,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  reviewGroupNames.forEach((key) => {\n    const reviewGroupLabels = config.labels.review[key] as any;\n    Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n      labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n    });\n  });\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: LabelResponse[]) =>\n    labels.some((label) => needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => requestedReviewLabelIds.includes(label.id));\n  const hasChangesRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => changesRequestedLabelIds.includes(label.id));\n  const hasApprovesReview = (labels: LabelResponse[]) =>\n    labels.some((label) => approvedReviewLabelIds.includes(label.id));\n\n  const getNeedsReviewGroupNames = (labels: LabelResponse[]): GroupNames[] =>\n    labels\n      .filter((label) => needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOPrIssueId,\n        prNumber,\n      };\n      context.log.debug('lock: try to lock pr', logInfos);\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info('lock: lock pr acquired', logInfos);\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info('lock: release pr (with error)', logInfos);\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info('lock: release pr', logInfos);\n        release();\n        resolve();\n      });\n    });\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr) => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info('reschedule', pr);\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const updatedPr = await fetchPr(context, pr.number);\n          await autoMergeIfPossibleOptionalPrContext(\n            appContext,\n            repoContext,\n            updatedPr,\n            context,\n          );\n        });\n      });\n    }, 10000);\n  };\n\n  return Object.assign(repoContext, {\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        context.log(`merge lock: next ${fullName}`, lockMergePr);\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log('merge lock: push queue', {\n        repo: fullName,\n        pr,\n        lockMergePr,\n        automergeQueue,\n      });\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    console.warn(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import { PayloadRepository } from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { OnCallback } from 'probot/lib/application';\nimport { RepoContext, obtainRepoContext } from 'context/repoContext';\nimport { AppContext } from 'context/AppContext';\n\nexport const createRepoHandler = <T extends { repository: PayloadRepository }>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): OnCallback<T> => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import { Context } from 'probot';\nimport Webhooks from '@octokit/webhooks';\nimport { OnCallback } from 'probot/lib/application';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport { AppContext } from '../../../context/AppContext';\nimport { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport {\n  createPullRequestContextFromWebhook,\n  CreatePrContextOptions,\n  PrContext,\n} from './createPullRequestContext';\nimport { PullRequestData, PullRequestFromWebhook } from './PullRequestData';\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  prContext: PrContext<T>,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends { repository: Webhooks.PayloadRepository },\n  U extends PullRequestFromWebhook\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => U | null,\n  callbackPr: (\n    prContext: PrContext<U>,\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPR(\n      String(pullRequest.id),\n      pullRequest.number,\n      async () => {\n        const prContext = await createPullRequestContextFromWebhook<T, U>(\n          appContext,\n          repoContext,\n          context,\n          pullRequest,\n          options,\n        );\n\n        return callbackPr(prContext, context, repoContext);\n      },\n    );\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: Webhooks.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr\n>(\n  appContext: AppContext,\n  getPrs: (payload: Context<T>['payload'], repoContext: RepoContext) => U[],\n  callbackPr: (\n    pr: U,\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { contextIssue } from '../../../context/utils';\nimport { PrContext } from '../utils/createPullRequestContext';\n\nexport const autoAssignPRToCreator = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request'] | Octokit.PullsGetResponse>,\n  context: Context<E>,\n): Promise<void> => {\n  const { pr, repoContext } = prContext;\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (pr.assignees.length !== 0) return;\n  if (pr.user.type === 'Bot') return;\n\n  await context.github.issues.addAssignees(\n    contextIssue(context, {\n      assignees: [pr.user.login],\n    }),\n  );\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { PrContext } from '../utils/createPullRequestContext';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n  commentBody?: string;\n}\n\nconst cleanNewLines = (text: string): string => text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request'] | Octokit.PullsGetResponse>,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && prContext.pr.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(prContext.pr.body, update.body);\n  const promises = [];\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      prContext.pr.title = update.title as string;\n    }\n    if (hasDiffInBody) {\n      console.log({\n        diff,\n        originalTitle: prContext.pr.title,\n        originalBody: cleanNewLines(prContext.pr.body),\n        updatedBody: update.body && cleanNewLines(update.body),\n        hasBodyDiff: hasDiffInBody,\n      });\n\n      diff.body = update.body;\n      prContext.pr.body = update.body as string;\n    }\n\n    promises.push(\n      context.github.pulls.update(\n        context.repo({\n          pull_number: prContext.pr.number,\n          ...diff,\n        }),\n      ),\n    );\n  }\n\n  if (\n    update.commentBody &&\n    checkIfHasDiff(prContext.commentBody, update.commentBody)\n  ) {\n    if (update.commentBody.includes('Explain here why this PR')) {\n      throw new Error('Not valid comment body');\n    }\n\n    promises.push(\n      context.github.issues.updateComment(\n        context.repo({\n          comment_id: prContext.reviewflowPr.commentId,\n          body: update.commentBody,\n        }),\n      ),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: Webhooks.PayloadRepository }\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  await context.github.repos.createStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { LabelResponse } from '../../../../context/initRepoLabels';\nimport { contextIssue } from '../../../../context/utils';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends Webhooks.WebhookPayloadPullRequest\n>(\n  pr: Octokit.PullsGetResponse | T['pull_request'],\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pr.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.github.issues.removeLabel(\n      contextIssue(context, { name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.github.issues.addLabels(\n      contextIssue(context, { labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import { Octokit, Context } from 'probot';\nimport Webhooks from '@octokit/webhooks';\nimport { RepoContext } from 'context/repoContext';\nimport { AppContext } from 'context/AppContext';\nimport {\n  PrContext,\n  PrContextWithUpdatedPr,\n} from '../utils/createPullRequestContext';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { Options } from './utils/body/prOptions';\nimport { updatePrIfNeeded } from './updatePr';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pr:\n    | Octokit.PullsGetResponse\n    | Webhooks.WebhookPayloadPullRequest['pull_request'],\n): Options => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(pr.labels, featureBranchLabel);\n  const prHasSkipCiLabel = hasLabelInPR(pr.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pr.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    featureBranch: prHasFeatureBranchLabel,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  appContext: AppContext,\n  repoContext: RepoContext,\n  pr:\n    | Octokit.PullsGetResponse\n    | Webhooks.WebhookPayloadPullRequest['pull_request'],\n  context: Context<any>,\n  prContext:\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n    | PrContextWithUpdatedPr,\n): Promise<void> => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(pr.labels, featureBranchLabel);\n  const prHasSkipCiLabel = hasLabelInPR(pr.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pr.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    prContext.commentBody,\n    calcDefaultOptions(repoContext, pr),\n  );\n\n  await updatePrIfNeeded(prContext, context, { commentBody });\n\n  if (options && (featureBranchLabel || automergeLabel)) {\n    await Promise.all([\n      featureBranchLabel &&\n        syncLabel(\n          pr,\n          context,\n          options.featureBranch,\n          featureBranchLabel,\n          prHasFeatureBranchLabel,\n        ),\n      skipCiLabel &&\n        syncLabel(\n          pr,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pr,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(prContext, context, prLabels);\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pr.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import Webhooks from '@octokit/webhooks';\nimport parse from '@commitlint/parse';\nimport { Context, Octokit } from 'probot';\nimport { contextPr } from '../../../context/utils';\nimport { PrContext } from '../utils/createPullRequestContext';\nimport syncLabel from './utils/syncLabel';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport { updatePrIfNeeded } from './updatePr';\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request'] | Octokit.PullsGetResponse>,\n  context: Context<E>,\n  commentBody = prContext.commentBody,\n): Promise<void> => {\n  const pr = prContext.updatedPr || prContext.pr;\n  const { repoContext } = prContext;\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await context.github.paginate(\n    context.github.pulls.listCommits.endpoint.merge(\n      contextPr(context, {\n        // A custom page size up to 100. Default is 30.\n        per_page: 100,\n      }),\n    ),\n    (res) => res.data,\n  );\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: any = conventionalCommits.reduce(\n    (acc, c, index) => {\n      const breakingChangesNotes = c.notes.filter(\n        (note: any) => note.title === 'BREAKING CHANGE',\n      );\n      if (breakingChangesNotes.length !== 0) {\n        acc.push({ commit: commits[index], breakingChangesNotes });\n      }\n\n      return acc;\n    },\n    [],\n  );\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }: any) =>\n            breakingChangesNotes.map(\n              (note: any) =>\n                `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pr,\n      context,\n      breakingChangesCommits.length !== 0,\n      breakingChangesLabel,\n    ),\n    updatePrIfNeeded(prContext, context, { commentBody: newCommentBody }),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import { Context, Octokit } from 'probot';\nimport Webhooks from '@octokit/webhooks';\nimport { StatusError, StatusInfo } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport { PrContext } from '../utils/createPullRequestContext';\nimport { cleanTitle } from './utils/cleanTitle';\nimport { updatePrIfNeeded } from './updatePr';\nimport createStatus from './utils/createStatus';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\n\ninterface StatusWithInfo {\n  name: string;\n  info: StatusInfo;\n  error?: undefined;\n}\n\ninterface StatusWithError {\n  name: string;\n  error: StatusError;\n  info?: undefined;\n}\n\ntype Status = StatusWithInfo | StatusWithError;\n\nexport const editOpenedPR = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request'] | Octokit.PullsGetResponse>,\n  context: Context<E>,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  const { repoContext } = prContext;\n  const pr = prContext.updatedPr || prContext.pr;\n\n  const title = repoContext.config.trimTitle ? cleanTitle(pr.title) : pr.title;\n\n  const isPrFromBot = pr.user.type === 'Bot';\n\n  const statuses: Status[] = [];\n\n  const errorRule = repoContext.config.parsePR.title.find((rule) => {\n    if (rule.bot === false && isPrFromBot) return false;\n\n    const match = rule.regExp.exec(title);\n    if (match === null) {\n      if (rule.status) {\n        statuses.push({ name: rule.status, error: rule.error });\n      }\n      return true;\n    }\n\n    if (rule.status && rule.statusInfoFromMatch) {\n      statuses.push({\n        name: rule.status,\n        info: rule.statusInfoFromMatch(match),\n      });\n      return false;\n    }\n\n    return false;\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.github.checks.listForRef(\n      context.repo({\n        ref: pr.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises = Promise.all<any>(\n    [\n      ...statuses.map(\n        ({ name, error, info }): Promise<void> =>\n          createStatus(\n            context,\n            name,\n            pr.head.sha,\n            error ? 'failure' : 'success',\n            error ? error.title : (info as StatusInfo).title,\n            error ? undefined : (info as StatusInfo).url,\n          ),\n      ),\n      ...(previousSha\n        ? statuses\n            .map(({ name, error, info }): Promise<void> | undefined =>\n              error\n                ? createStatus(\n                    context,\n                    name,\n                    previousSha,\n                    'success',\n                    'New commits have been pushed',\n                  )\n                : undefined,\n            )\n            .filter(ExcludesFalsy)\n        : []),\n      hasLintPrCheck &&\n        context.github.checks.create(\n          context.repo({\n            name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n            head_sha: pr.head.sha,\n            status: 'completed' as 'completed',\n            conclusion: (errorRule ? 'failure' : 'success') as\n              | 'failure'\n              | 'success',\n            started_at: date,\n            completed_at: date,\n            output: errorRule\n              ? errorRule.error\n              : {\n                  title: '✓ Your PR is valid',\n                  summary: '',\n                },\n          }),\n        ),\n      !hasLintPrCheck && previousSha && errorRule\n        ? createStatus(\n            context,\n            'lint-pr',\n            previousSha,\n            'success',\n            'New commits have been pushed',\n          )\n        : undefined,\n      !hasLintPrCheck &&\n        createStatus(\n          context,\n          'lint-pr',\n          pr.head.sha,\n          errorRule ? 'failure' : 'success',\n          errorRule ? errorRule.error.title : '✓ Your PR is valid',\n        ),\n    ].filter(ExcludesFalsy),\n  );\n\n  const commentBodyInfos = statuses\n    .filter((status) => status.info && status.info.inBody)\n    .map((status) => status.info) as StatusInfo[];\n\n  const shouldCreateCommentBody = prContext.commentBody === defaultCommentBody;\n\n  const commentBody = shouldCreateCommentBody\n    ? createCommentBody(calcDefaultOptions(repoContext, pr), commentBodyInfos)\n    : updateCommentBodyInfos(prContext.commentBody, commentBodyInfos);\n\n  const body = removeDeprecatedReviewflowInPrBody(pr.body);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    await Promise.all([\n      promises,\n      updatePrIfNeeded(prContext, context, { title, body }),\n      readCommitsAndUpdateInfos(prContext, context, commentBody),\n    ]);\n  } else {\n    await Promise.all([\n      promises,\n      updatePrIfNeeded(prContext, context, { title, body, commentBody }),\n    ]);\n  }\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { LabelResponse } from 'context/initRepoLabels';\nimport {\n  PrContext,\n  PrContextWithUpdatedPr,\n} from '../utils/createPullRequestContext';\nimport { PullRequestWithDecentDataFromWebhook } from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: Webhooks.PayloadRepository }\n>(\n  prContext:\n    | PrContext<PullRequestWithDecentDataFromWebhook>\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContextWithUpdatedPr,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const pr: Octokit.PullsGetResponse | PullRequestWithDecentDataFromWebhook =\n    prContext.updatedPr ||\n    (prContext as\n      | PrContext<PullRequestWithDecentDataFromWebhook>\n      | PrContext<Octokit.PullsGetResponse>).pr;\n  const hasPrCheck = (\n    await context.github.checks.listForRef(\n      context.repo({\n        ref: pr.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug('add status check', { hasPrCheck, state, description });\n\n  if (hasPrCheck) {\n    await context.github.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME as string,\n        head_sha: pr.head.sha,\n        started_at: pr.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pr.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pr.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: Webhooks.PayloadRepository }\n>(\n  prContext:\n    | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContextWithUpdatedPr,\n  pr:\n    | Webhooks.WebhookPayloadPullRequest['pull_request']\n    | Octokit.PullsGetResponse,\n  context: Context<T>,\n  labels: LabelResponse[] = pr.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  const { repoContext } = prContext;\n\n  context.log.debug('updateStatusCheckFromLabels', {\n    labels: labels.map((l) => l?.name),\n    hasNeedsReview: repoContext.hasNeedsReview(labels),\n    hasApprovesReview: repoContext.hasApprovesReview(labels),\n  });\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      prContext,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (pr.requested_reviewers.length !== 0) {\n    return createFailedStatusCheck(\n      // TODO remove `as`\n      // https://github.com/probot/probot/issues/1219\n      `Awaiting review from: ${(pr.requested_reviewers as Octokit.PullsGetResponse['requested_reviewers'][])\n        .map((rr: any) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length !== 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    prContext,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { LabelResponse } from '../../../context/initRepoLabels';\nimport { GroupLabels } from '../../../accountConfigs/types';\nimport { contextIssue } from '../../../context/utils';\nimport {\n  PrContext,\n  PrContextWithUpdatedPr,\n} from '../utils/createPullRequestContext';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: Webhooks.PayloadRepository },\n  GroupNames extends string = any\n>(\n  prContext:\n    | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n    | PrContext<Octokit.PullsGetResponse>\n    | PrContextWithUpdatedPr,\n  context: Context<E>,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<LabelResponse[]> => {\n  const { repoContext } = prContext;\n  const pr =\n    prContext.updatedPr ||\n    (prContext as\n      | PrContext<Webhooks.WebhookPayloadPullRequest['pull_request']>\n      | PrContext<Octokit.PullsGetResponse>).pr;\n  context.log.debug('updateReviewStatus', {\n    reviewGroup,\n    labelsToAdd,\n    labelsToRemove,\n  });\n\n  let prLabels: LabelResponse[] = pr.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label: LabelResponse) => label.name),\n  );\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (key: GroupLabels): undefined | LabelResponse => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label || prLabels.some((prLabel) => prLabel.id === label.id)) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n\n  repoContext.getTeamsForLogin(pr.user.login).forEach((teamName) => {\n    const team = repoContext.config.teams[teamName];\n    if (team.labels) {\n      team.labels.forEach((labelKey) => {\n        const label = repoContext.labels[labelKey];\n        if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n          newLabelNames.add(label.name);\n          toAdd.add(labelKey);\n          toAddNames.add(label.name);\n        }\n      });\n    }\n  });\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size !== 0 || toDelete.size !== 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug('updateReviewStatus', {\n        reviewGroup,\n        toAdd: [...toAdd],\n        toDelete: [...toDelete],\n        toAddNames: [...toAddNames],\n        toDeleteNames: [...toDeleteNames],\n      });\n\n      if (toAdd.size !== 0) {\n        const result = await context.github.issues.addLabels(\n          contextIssue(context, {\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size !== 0) {\n        for (const toDeleteName of [...toDeleteNames]) {\n          try {\n            const result = await context.github.issues.removeLabel(\n              contextIssue(context, {\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn('error removing label', {\n              err: err?.message,\n            });\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug('updateReviewStatus', {\n        reviewGroup,\n        toAdd: [...toAdd],\n        toDelete: [...toDelete],\n        oldLabels: prLabels.map((l: LabelResponse) => l.name),\n        newLabelNames: newLabelNamesArray,\n      });\n\n      const result = await context.github.issues.replaceLabels(\n        contextIssue(context, {\n          labels: newLabelNamesArray,\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(prContext, pr, context, prLabels);\n  // }\n\n  return prLabels;\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { contextPr } from '../../../context/utils';\nimport { PrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request']> | PrContext<Octokit.PullsGetResponse>,\n  context: Context<E>,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = prContext.repoContext.labels['code/approved'];\n  if (hasLabelInPR(prContext.pr.labels, codeApprovedLabel)) {\n    await context.github.pulls.createReview(\n      contextPr(context, { event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(prContext, context);\n    return true;\n  }\n\n  return false;\n};\n","import { Application } from 'probot';\nimport { AppContext } from 'context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { defaultCommentBody } from './actions/utils/body/updateBody';\nimport { createReviewflowComment } from './utils/reviewflowComment';\n\nexport default function opened(app: Application, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (prContext, context) => {\n        const { pr } = prContext;\n        const fromRenovate = pr.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(prContext, context),\n          editOpenedPR(prContext, context, true),\n          fromRenovate\n            ? autoApproveAndAutoMerge(prContext, context).then(\n                async (approved: boolean): Promise<void> => {\n                  if (\n                    !approved &&\n                    prContext.repoContext.config.requiresReviewRequest\n                  ) {\n                    await updateReviewStatus(prContext, context, 'dev', {\n                      add: ['needsReview'],\n                    });\n                  }\n                },\n              )\n            : updateReviewStatus(prContext, context, 'dev', {\n                add: prContext.repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n      (pr, context, repoContext) => {\n        return {\n          reviewflowCommentPromise: createReviewflowComment(\n            context,\n            pr,\n            defaultCommentBody,\n          ),\n        };\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\n\nexport default function closed(app: Application, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (prContext, context, repoContext) => {\n        const { pr, commentBody } = prContext;\n\n        if (!repoContext.shouldIgnore) {\n          const repo = context.payload.repository;\n\n          if (pr.merged) {\n            const isNotFork = pr.head.repo.id === repo.id;\n            const options = parseOptions(\n              commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pr.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.github.git\n                    .deleteRef(context.repo({ ref: `heads/${pr.head.ref}` }))\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pr.number,\n                'pr closed',\n              ),\n              updateReviewStatus(prContext, context, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        if (pr.assignees) {\n          pr.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { editOpenedPR } from './actions/editOpenedPR';\n\nexport default function closed(app: Application, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (prContext, context, repoContext): Promise<void> => {\n        await Promise.all([\n          updateReviewStatus(prContext, context, 'dev', {\n            add: ['needsReview'],\n            remove: ['approved'],\n          }),\n          editOpenedPR(prContext, context, true),\n        ]);\n      },\n    ),\n  );\n}\n","import { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n","import { KnownBlock } from '@slack/web-api';\nimport { SlackMessage } from '../../../context/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section' as const,\n  text: {\n    type: 'mrkdwn' as const,\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section' as const,\n        text: {\n          type: 'mrkdwn' as const,\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import { Context, Octokit } from 'probot';\nimport { RepoContext } from '../../../context/repoContext';\nimport { contextPr, getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\ninterface Reviewer {\n  id: number;\n  login: string;\n}\n\nexport const getReviewersAndReviewStates = async <\n  GroupNames extends string = any\n>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.github.paginate(\n    context.github.pulls.listReviews.endpoint.merge(contextPr(context)),\n    ({ data: reviews }: Octokit.Response<Octokit.PullsListReviewsResponse>) => {\n      reviews.forEach((review) => {\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({ id: review.user.id, login: review.user.login });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import Webhooks from '@octokit/webhooks';\n\ntype WebhookPr =\n  | Webhooks.WebhookPayloadPullRequest['pull_request']\n  | Webhooks.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: Webhooks.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: Webhooks.PayloadRepository;\n      issue: Webhooks.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: Webhooks.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n","import { Application, Octokit, Context } from 'probot';\nimport {\n  WebhookPayloadPullRequestReviewComment,\n  WebhookPayloadIssueComment,\n} from '@octokit/webhooks';\nimport slackifyMarkdown from 'slackify-markdown';\nimport { ExcludesNullish } from 'utils/Excludes';\nimport * as slackUtils from '../../slack/utils';\nimport { AccountEmbed } from '../../mongo';\nimport { SlackMessage } from '../../context/SlackMessage';\nimport { PostSlackMessageResult } from '../../context/TeamSlack';\nimport { contextPr } from '../../context/utils';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { parseMentions } from './utils/parseMentions';\nimport {\n  getPullRequestFromPayload,\n  PullRequestFromPayload,\n} from './utils/getPullRequestFromPayload';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { fetchPr } from './utils/fetchPr';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<Octokit.PullsListCommentsResponse> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.github.paginate(\n    context.github.pulls.listComments.endpoint.merge(contextPr(context)),\n    ({ data }: Octokit.Response<Octokit.PullsListCommentsResponse>) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: Octokit.PullsListCommentsResponse,\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: Octokit.PullsListCommentsResponse,\n): { id: number; login: string }[] => {\n  const userIds = new Set<number>();\n  const users: { id: number; login: string }[] = [];\n\n  discussion.forEach((c) => {\n    if (userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Application,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      WebhookPayloadPullRequestReviewComment | WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          WebhookPayloadPullRequestReviewComment | WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (prContext, context, repoContext): Promise<void> => {\n        const pr = await fetchPr(context, prContext.pr.number);\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = pr.user.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers = reviewers.filter(\n          (u) => u.id !== pr.user.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers.filter((rr) => {\n              return (\n                !followers.find((f) => f.id === rr.id) &&\n                rr.id !== comment.user.id &&\n                rr.id !== pr.user.id\n              );\n            }),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== pr.user.id &&\n            u.id !== comment.user.id &&\n            !followers.find((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== pr.user.login &&\n            m !== comment.user.login &&\n            !followers.find((f) => f.login === m) &&\n            !usersInThread.find((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(pr.user.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                pr.user.id === comment.user.id ? 'his' : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyMarkdown(body);\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                pr.user.id,\n                pr.user.login,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower.id,\n              follower.login,\n              message,\n            ),\n          ),\n        );\n\n        promisesNotOwner.push(\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage(\n              'pr-comment-thread',\n              user.id,\n              user.login,\n              message,\n            ),\n          ),\n        );\n\n        if (mentions.length !== 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    u._id as any, // TODO _id is number\n                    u.login,\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { WebhookPayloadPullRequestReviewComment } from '@octokit/webhooks';\nimport slackifyMarkdown from 'slackify-markdown';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport {\n  getPullRequestFromPayload,\n  PullRequestFromPayload,\n} from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\n\nexport default function prCommentEditedOrDeleted(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      WebhookPayloadPullRequestReviewComment,\n      PullRequestFromPayload<WebhookPayloadPullRequestReviewComment>\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (prContext, context, repoContext): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPrContext = await fetchPullRequestAndCreateContext(\n            context,\n            prContext,\n          );\n          if (!updatedPrContext.updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              appContext,\n              repoContext,\n              updatedPrContext.updatedPr,\n              context,\n              updatedPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = comment.pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.account._id,\n          'account.type': repoContext.accountType,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages = await appContext.mongoStores.slackSentMessages.findAll(\n          criteria,\n        );\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(sentTo.ts, sentTo.channel),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(slackifyMarkdown(comment.body)),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                      ...sentMessage.message,\n                      secondaryBlocks,\n                    }),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default function reviewRequested(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (prContext, context, repoContext): Promise<void> => {\n        const { pr } = prContext;\n        const sender = context.payload.sender;\n\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(prContext, context, reviewerGroup, {\n            add: ['needsReview', !shouldWait && 'requested'],\n            remove: ['approved'],\n          });\n\n          if (pr.assignees) {\n            pr.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pr.assignees.find((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests your review on ${slackUtils.createPrLink(\n            pr,\n            repoContext,\n          )} !\\n> ${pr.title}`;\n          const message = { text };\n          const result = await repoContext.slack.postMessage(\n            'pr-review',\n            reviewer.id,\n            reviewer.login,\n            message,\n          );\n          if (result) {\n            await appContext.mongoStores.slackSentMessages.insertOne({\n              type: 'review-requested',\n              typeId: `${pr.id}_${reviewer.id}`,\n              message,\n              account: repoContext.accountEmbed,\n              sentTo: [result],\n            });\n          }\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (prContext, context, repoContext): Promise<void> => {\n        const { pr } = prContext;\n        const sender = context.payload.sender;\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pr.requested_reviewers,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(prContext, context, reviewerGroup, {\n            add: [\n              // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n              hasChangesRequestedInReviews && 'changesRequested',\n              // if was already approved by another member in the group and has no other requests waiting\n              approved && 'approved',\n            ],\n            // remove labels if has no other requests waiting\n            remove: [\n              approved && 'needsReview',\n              !hasRequestedReviewsForGroup && 'requested',\n            ],\n          });\n\n          if (pr.assignees) {\n            pr.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pr.assignees.find((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        repoContext.slack.postMessage(\n          'pr-review',\n          reviewer.id,\n          reviewer.login,\n          {\n            text: `:skull_and_crossbones: ${repoContext.slack.mention(\n              sender.login,\n            )} removed the request for your review on ${slackUtils.createPrLink(\n              pr,\n              repoContext,\n            )}`,\n          },\n        );\n\n        const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n          {\n            'account.id': repoContext.account._id,\n            'account.type': repoContext.accountType,\n            type: 'review-requested',\n            typeId: `${pr.id}_${reviewer.id}`,\n          },\n        );\n\n        if (sentMessageRequestedReview) {\n          const sentTo = sentMessageRequestedReview.sentTo[0];\n          const message = sentMessageRequestedReview.message;\n          await Promise.all([\n            repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n              ...message,\n              text: message.text\n                .split('\\n')\n                .map((l) => `~${l}~`)\n                .join('\\n'),\n            }),\n            repoContext.slack.addReaction(\n              sentTo.ts,\n              sentTo.channel,\n              'skull_and_crossbones',\n            ),\n            appContext.mongoStores.slackSentMessages.deleteOne(\n              sentMessageRequestedReview,\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (prContext, context): Promise<void> => {\n        const { pr, repoContext } = prContext;\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = (context.payload as any).review;\n\n        const reviewByOwner = pr.user.login === reviewer.login;\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const followers = reviewers.filter(\n          (user) => user.id !== reviewer.id && user.id !== pr.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers.filter((rr) => {\n              return (\n                !followers.find((f) => f.id === rr.id) &&\n                rr.id !== reviewer.id &&\n                rr.id !== pr.user.id\n              );\n            }),\n          );\n        }\n\n        if (!reviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pr.requested_reviewers,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPrContext = await fetchPullRequestAndCreateContext(\n              context,\n              prContext,\n            );\n\n            const newLabels = await updateReviewStatus(\n              updatedPrContext,\n              context,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPrContext,\n                context,\n                newLabels,\n              );\n            }\n          }\n\n          if (pr.assignees) {\n            pr.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pr.assignees.find((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n            {\n              'account.id': repoContext.account._id,\n              'account.type': repoContext.accountType,\n              type: 'review-requested',\n              typeId: `${pr.id}_${reviewer.id}`,\n            },\n          );\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                ...message,\n                text: message.text\n                  .split('\\n')\n                  .map((l) => `~${l}~`)\n                  .join('\\n'),\n              }),\n              repoContext.slack.addReaction(sentTo.ts, sentTo.channel, emoji),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pr, repoContext);\n          const ownerMention = repoContext.slack.mention(pr.user.login);\n\n          const createMessage = (toOwner?: boolean): string => {\n            const ownerPart = toOwner ? 'your PR' : `${ownerMention}'s PR`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown(body);\n\n          repoContext.slack.postMessage(\n            'pr-review',\n            pr.user.id,\n            pr.user.login,\n            createSlackMessageWithSecondaryBlock(\n              createMessage(true),\n              slackifiedBody,\n            ),\n          );\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          followers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pr, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          followers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\n\nexport default function reviewDismissed(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (prContext, context, repoContext): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = (context.payload as any).review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPrContext = await fetchPullRequestAndCreateContext(\n            context,\n            prContext,\n          );\n          const pr = updatedPrContext.updatedPr;\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pr.requested_reviewers,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(updatedPrContext, context, reviewerGroup, {\n            add: [\n              !hasApprovals && 'needsReview',\n              hasApprovals &&\n                !hasRequestedReviewsForGroup &&\n                !hasChangesRequestedInReviews &&\n                'approved',\n            ],\n            remove: [\n              !hasRequestedReviewsForGroup &&\n                !hasChangesRequestedInReviews &&\n                'requested',\n              !hasChangesRequestedInReviews && 'changesRequested',\n              !hasApprovals && 'approved',\n            ],\n          });\n\n          if (pr.assignees) {\n            pr.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pr.assignees.find((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            prContext.pr.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage(\n                'pr-review',\n                assignee.id,\n                assignee.login,\n                {\n                  text: `:skull: ${repoContext.slack.mention(\n                    reviewer.login,\n                  )} dismissed his review on ${slackUtils.createPrLink(\n                    prContext.pr,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          } else {\n            repoContext.slack.postMessage(\n              'pr-review',\n              reviewer.id,\n              reviewer.login,\n              {\n                text: `:skull: ${repoContext.slack.mention(\n                  sender.login,\n                )} dismissed your review on ${slackUtils.createPrLink(\n                  prContext.pr,\n                  repoContext,\n                )}`,\n              },\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\n\nexport default function synchronize(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (prContext, context): Promise<void> => {\n        const updatedPrContext = await fetchPullRequestAndCreateContext(\n          context,\n          prContext,\n        );\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(updatedPrContext, context, true, previousSha),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPrContext,\n            updatedPrContext.updatedPr,\n            context,\n            updatedPrContext.updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(updatedPrContext, context);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Application, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (prContext, context, repoContext): Promise<void> => {\n        const prContextUpdated = await fetchPullRequestAndCreateContext(\n          context,\n          prContext,\n        );\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        await editOpenedPR(prContextUpdated, context, false);\n        await autoMergeIfPossible(prContextUpdated, context);\n      },\n    ),\n  );\n}\n","import Webhooks from '@octokit/webhooks';\nimport { Context, Octokit } from 'probot';\nimport { PrContext } from '../utils/createPullRequestContext';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport { Options } from './utils/body/prOptions';\nimport { updatePrIfNeeded } from './updatePr';\n\nexport const updatePrCommentBody = async <\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  prContext: PrContext<E['pull_request'] | Octokit.PullsGetResponse>,\n  context: Context<E>,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    prContext.commentBody,\n    prContext.repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrIfNeeded(prContext, context, { commentBody: newBody });\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { contextPr, contextIssue } from '../../context/utils';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { updatePrCommentBody } from './actions/updatePrCommentBody';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { fetchPullRequestAndCreateContext } from './utils/createPullRequestContext';\n\nconst isFromRenovate = (\n  payload: Webhooks.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      Webhooks.WebhookPayloadPullRequest,\n      Webhooks.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (prContext, context, repoContext) => {\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPrContext = await fetchPullRequestAndCreateContext(\n          context,\n          prContext,\n        );\n        const { updatedPr: pr } = updatedPrContext;\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.github.pulls.listReviews(\n              //   contextPr(context, { per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.github.pulls.createReview(\n                contextPr(context, { event: 'APPROVE' }),\n              );\n\n              let labels = pr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.github.issues.addLabels(\n                  contextIssue(context, {\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              await updateStatusCheckFromLabels(\n                updatedPrContext,\n                pr,\n                context,\n                labels,\n              );\n              await updatePrCommentBody(updatedPrContext, context, {\n                autoMergeWithSkipCi,\n                // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                  ? true\n                  : repoContext.config.prDefaultOptions.autoMerge,\n              });\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBody(updatedPrContext, context, {\n                autoMerge: true,\n                // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                autoMergeWithSkipCi: hasLabelInPR(pr.labels, codeApprovedLabel)\n                  ? true\n                  : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n              });\n            }\n            await autoMergeIfPossible(updatedPrContext, context);\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.github.issues.removeLabel(\n              contextIssue(context, { name: label.name }),\n            );\n          } else {\n            await context.github.issues.addLabels(\n              contextIssue(context, { labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPrContext, pr, context);\n\n        const featureBranchLabel = repoContext.labels['feature-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (featureBranchLabel && label.id === featureBranchLabel.id)\n            return 'featureBranch';\n          if (automergeLabel && label.id === automergeLabel.id)\n            return 'autoMerge';\n          if (skipCiLabel && label.id === skipCiLabel.id)\n            return 'autoMergeWithSkipCi';\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBody(updatedPrContext, context, {\n            [option]: context.payload.action === 'labeled',\n          });\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(updatedPrContext, context);\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pr.number,\n              'automerge label removed',\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { autoMergeIfPossibleOptionalPrContext } from './actions/autoMergeIfPossible';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pr, context, repoContext) => {\n        const pullRequest = await fetchPr(context, pr.number);\n\n        await autoMergeIfPossibleOptionalPrContext(\n          appContext,\n          repoContext,\n          pullRequest,\n          context,\n        );\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { fetchPr } from './utils/fetchPr';\nimport { createPullRequestContextFromPullResponse } from './utils/createPullRequestContext';\n\nexport default function checksuiteCompleted(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pr, context, repoContext) => {\n        const pullRequest = await fetchPr(context, pr.number);\n        const prContext = await createPullRequestContextFromPullResponse(\n          appContext,\n          repoContext,\n          context,\n          pullRequest,\n          {},\n        );\n\n        await autoMergeIfPossible(prContext, context);\n      },\n    ),\n  );\n}\n","import Webhooks from '@octokit/webhooks';\nimport { Application, Context } from 'probot';\nimport { AppContext } from '../../context/AppContext';\nimport { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<Webhooks.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.find((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Application, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport {\n  AccountContext,\n  obtainAccountContext,\n} from '../../../context/accountContext';\nimport { AppContext } from '../../../context/AppContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange = <\n  T extends { organization: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  callback: CallbackContextAndAccountContext<T>,\n) => (context: Context<T>) => {\n  return handlerOrgChange(appContext, context, callback);\n};\n","import { Application } from 'probot';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\n\nexport default function repoEdited(\n  app: Application,\n  appContext: AppContext,\n): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport Webhooks from '@octokit/webhooks';\nimport openedHandler from './events/pr-handlers/opened';\nimport closedHandler from './events/pr-handlers/closed';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport status from './events/pr-handlers/status';\nimport { createHandlerOrgChange } from './events/account-handlers/utils/handler';\nimport repoEdited from './events/repository-handlers/repoEdited';\nimport { syncOrg } from './events/account-handlers/actions/syncOrg';\nimport { syncTeams } from './events/account-handlers/actions/syncTeams';\nimport { AppContext } from './context/AppContext';\n\nexport default function initApp(\n  app: Application,\n  appContext: AppContext,\n): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<Webhooks.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        await syncOrg(\n          appContext.mongoStores,\n          context.github,\n          accountContext.account.installationId as number,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<Webhooks.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.github,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  // /* https://developer.github.com/webhooks/event-payloads/#membership */\n  // app.on(\n  //   ['membership.added', 'membership.removed'],\n  //   createHandlerOrgChange<Webhooks.WebhookPayloadMembership>(\n  //     mongoStores,\n  //     async (context, accountContext) => {\n  //       await syncTeamMembers(\n  //         mongoStores,\n  //         context.github,\n  //         context.payload.organization,\n  //         context.payload.team,\n  //       );\n  //     },\n  //   ),\n  // );\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n}\n","import { WebClient } from '@slack/web-api';\nimport { Octokit } from 'probot';\nimport { MongoStores, Org, OrgMember } from '../mongo';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items\n          .map((pr: any) => {\n            const repoName = pr.repository_url.slice(\n              'https://api.github.com/repos/'.length,\n            );\n            const prFullName = `${repoName}#${pr.number}`;\n\n            return [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `*${createLink(pr.html_url, pr.title)}*`,\n                  //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n                },\n              },\n              {\n                type: 'context',\n                elements: [\n                  {\n                    type: 'mrkdwn',\n                    text: `${createLink(pr.html_url, prFullName)} ${\n                      pr.draft ? '· _Draft_' : ''\n                    }`,\n                  },\n                  {\n                    type: 'image',\n                    image_url: pr.user.avatar_url,\n                    alt_text: pr.user.login,\n                  },\n                  {\n                    type: 'mrkdwn',\n                    text: `${pr.user.login}`,\n                  },\n                ],\n              },\n            ];\n          })\n          .flat(),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 0) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","import 'dotenv/config';\nimport { Probot, Application } from 'probot';\nimport { AppContext } from './context/AppContext';\nimport mongoInit from './mongo';\nimport appRouter from './appRouter';\nimport initApp from './initApp';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\n// eslint-disable-next-line import/no-commonjs\nProbot.run((app: Application): void => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","MONGO_DB","Error","init","config","Map","MONGO_HOST","MONGO_PORT","MONGO_USER","set","MONGO_PASSWORD","connection","MongoConnection","userDmSettings","MongoStore","collection","then","coll","createIndex","userId","orgId","unique","users","login","orgs","orgMembers","orgTeams","slackSentMessages","type","typeId","deleteMany","created","$lt","Date","now","automergeLogs","repoFullName","prs","Layout","lang","title","REVIEWFLOW_NAME","children","padding","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","oauth2","create","client","id","secret","auth","tokenHost","tokenPath","authorizePath","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","getUser","redirect","api","Octokit","accessToken","router","get","redirectUri","githubAuth","authorizationCode","authorizeURL","redirect_uri","scope","query","error","send","error_description","code","result","getToken","renderToStaticMarkup","access_token","octokit","user","getAuthenticated","data","time","token","expiresIn","httpOnly","repository","repos","list","per_page","map","repo","owner","name","length","params","status","permissions","admin","data2","apps","getRepoInstallation","catch","err","home","listForAuthenticatedUser","display","flexGrow","org","syncTeams","mongoStores","github","orgEmbed","teamIds","Promise","all","paginate","teams","endpoint","merge","team","push","upsertOne","_id","slug","description","$not","$in","syncOrg","installationId","orgInStore","memberIds","listMembers","member","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","featureBranch","autoMergeWithSkipCi","autoMerge","deleteAfterMerge","parsePR","groups","waitForGroups","labels","color","review","ci","inProgress","succeeded","failed","ignoreRepoPattern","autoMergeRenovateWithSkipCi","regExp","summary","bot","statusInfoFromMatch","match","issue","inBody","url","botUsers","dev","JulienBreux","ORNIKAR_EMAIL_DOMAIN","CamilSadiki","busser","abarreir","arthurflachs","damienorny","darame07","Pixy","Radyum","christophehurpeau","HugoGarrido","LentnerStefan","CorentinAndre","Mxime","vlbr","mdcarter","ChibiBlasphem","design","jperriere","CoralineColasse","Lenamari","ops","logins","backends","frontends","duplicate","documentation","rfc","bug","enhancement","question","wontfix","needsReview","requested","changesRequested","approved","tilap","chrisconfig","accountConfigs","ornikar","reviewflow","defaultDmSettings","cache","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","newSettings","orgCache","getUserDmSettings","orgDefaultDmSettings","userDmSettingsConfig","findOne","settings","dmMessages","orgSettings","find","o","findByKey","installation","getOrgInstallation","width","Object","entries","key","__html","patch","bodyParser","json","body","updateOne","$set","value","updated","$setOnInsert","upsert","syncUser","userInfo","userSettings","u","getUserInstallation","username","appRouter","app","route","use","cookieParser","fetchPr","context","prNumber","prResult","pulls","pull_number","options","optionsRegexps","option","regexp","RegExp","optionsLabels","label","parseOptions","content","defaultOptions","reduce","acc","exec","parseCommitNotes","commitNotes","replace","trim","parseBody","defaultCommentBody","toMarkdownOptions","join","toMarkdownInfos","infos","info","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","commentBody","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pr","issues","createComment","issue_number","number","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPr","appContext","repoContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","insertOne","account","accountEmbed","repoEmbed","existing","partialUpdateByKey","createPullRequestContextFromWebhook","shouldIgnore","updatedPr","createPullRequestContextFromPullResponse","console","log","fetchPullRequestAndCreateContext","prContext","hasLabelInPR","prLabels","some","l","hasFailedStatusOrChecks","checks","listForRef","ref","head","sha","failedChecks","check_runs","filter","check","conclusion","combinedStatus","getCombinedStatusForRef","state","failedStatuses","statuses","autoMergeIfPossibleOptionalPrContext","autoMergeLabel","removePrFromAutomergeQueue","isRenovatePr","startsWith","createMergeLockPrFromPr","branch","addLog","action","full_name","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","requested_reviewers","lockedPr","getMergeLockedPr","String","prId","pushAutomergeQueue","addMergeLockPr","mergeable","merged","reschedule","includes","renovateRebaseBody","update","base","parsedBody","mergeResult","merge_method","commit_title","commit_message","debug","Boolean","message","autoMergeIfPossible","ExcludesFalsy","ExcludesNullish","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelKey","labelConfig","labelColor","slice","existingLabel","createLabel","current_name","updateLabel","getKeys","keys","contextIssue","object","payload","pull_request","contextPr","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","emoji","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","initTeamSlack","slackHome","slackToken","githubLoginToSlackEmail","groupName","assign","slackEmails","values","slackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","forEach","email","m","slack","im","missingEmails","memberEmailToMemberId","page","profile","has","partialUpdateMany","conversations","open","channel","membersMap","getUserFromGithubLogin","githubLogin","category","githubId","DRY_RUN","chat","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","delete","reactions","add","timestamp","scheduleUpdateMember","getOrCreateAccount","accountInfo","initAccountContext","slackPromise","githubLoginToGroup","githubLoginToTeams","teamName","getReviewerGroups","githubLogins","Set","lock","Lock","accountType","callback","reject","logInfos","createReleaseCallback","release","getReviewerGroup","getTeamsForLogin","approveShouldWait","reviewerGroup","requestedReviewers","includesReviewerGroup","includesWaitForGroups","requestedReviewerGroups","request","group","accountContextsPromise","accountContexts","obtainAccountContext","existingAccountContext","existingPromise","promise","accountContext","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","reviewGroupNames","initRepoContext","fullName","repoEmoji","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","reason","shift","previousLength","p","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","warn","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","pullRequest","createPullRequestsHandler","getPrs","autoAssignPRToCreator","assignees","addAssignees","cleanTitle","s","arg1","arg2","toUpperCase","toLowerCase","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","promises","diff","originalTitle","originalBody","updatedBody","hasBodyDiff","updateComment","createStatus","target_url","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","removeLabel","response","addLabels","calcDefaultOptions","featureBranchLabel","automergeLabel","skipCiLabel","prHasFeatureBranchLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","readCommitsAndUpdateInfos","commits","listCommits","conventionalCommits","c","parse","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","editOpenedPR","shouldUpdateCommentBodyInfos","previousSha","isPrFromBot","errorRule","rule","date","toISOString","hasLintPrCheck","head_sha","started_at","completed_at","output","commentBodyInfos","shouldCreateCommentBody","addStatusCheck","hasPrCheck","created_at","updateStatusCheckFromLabels","createFailedStatusCheck","rr","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","toDeleteName","newLabelNamesArray","oldLabels","replaceLabels","autoApproveAndAutoMerge","codeApprovedLabel","createReview","event","opened","on","fromRenovate","closed","isNotFork","git","deleteRef","assignee","createLink","createPrLink","html_url","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","reviewStates","dismissed","reviewer","issueParser","actions","issuePrefixes","parseMentions","mentions","getPullRequestFromPayload","checkIfUserIsBot","checkIfIsThisBot","getDiscussion","in_reply_to_id","listComments","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","sentTo","pull_request_review_id","commentByOwner","followers","f","usersInThread","prUrl","slackUtils","ownerMention","commentLink","createMessage","toOwner","ownerPart","promisesOwner","promisesNotOwner","slackifiedBody","slackifyMarkdown","isBotUser","slackMessage","follower","prCommentEditedOrDeleted","sender","updatedPrContext","closed_at","criteria","sentMessages","sentMessage","reviewRequested","requested_reviewer","reviewRequestRemoved","hasRequestedReviewsForGroup","hasChangesRequestedInReviews","hasApprovedInReviews","sentMessageRequestedReview","split","deleteOne","getEmojiFromState","reviewSubmitted","reviewUrl","reviewByOwner","newLabels","reviewDismissed","hasApprovals","synchronize","before","edited","prContextUpdated","updatePrCommentBody","newBody","isFromRenovate","labelsChanged","autoMergeSkipCiLabel","checkrunCompleted","check_run","pull_requests","checksuiteCompleted","check_suite","isSameBranch","branches","b","handlerOrgChange","organization","createHandlerOrgChange","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","flat","views","publish","user_id","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","memberId","scheduleUpdateOrg","cursor","scheduleUpdateAllOrgs","Probot","run","mongoInit"],"mappings":"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"}