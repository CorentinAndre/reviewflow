{"version":3,"file":"index-node12-dev.cjs.js","sources":["../src/auth/github.ts","../src/views/Layout.tsx","../src/app/auth.tsx","../src/app/home.tsx","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/events/account-handlers/actions/syncTeams.ts","../src/app/org-settings.tsx","../src/app/repository.tsx","../src/events/account-handlers/actions/syncUser.ts","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/utils/Excludes.ts","../src/context/getOrCreateAccount.ts","../src/context/utils.ts","../src/context/voidTeamSlack.ts","../src/context/initTeamSlack.ts","../src/context/accountContext.ts","../src/events/account-handlers/utils/handler.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/utils/fetchPr.ts","../src/context/initRepoLabels.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/closed.ts","../src/slack/utils.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/slackifyCommentBody.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/actions/updateBranch.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/reopened.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/status.ts","../src/events/pr-handlers/synchronize.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/mongo.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { create } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = create({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps): ReactElement {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>{children}</div>\n      </body>\n    </html>\n  );\n}\n","import { promisify } from 'util';\nimport { Octokit } from '@octokit/rest';\nimport type { Router, Request, Response } from 'express';\nimport { sign, verify } from 'jsonwebtoken';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  const authInfo = await readAuthCookie(req, strategy);\n\n  if (authInfo?.id) {\n    return authInfo;\n  }\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nfunction createApi(accessToken: string): Octokit {\n  return new Octokit({ auth: accessToken });\n}\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{\n  authInfo: AuthInfo;\n  api: Octokit;\n} | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  const api = createApi(authInfo.accessToken);\n\n  return {\n    authInfo,\n    api,\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get('/login', async (req: Request, res: Response) => {\n    if (await getAuthInfoFromCookie(req, res)) {\n      return res.redirect('/app');\n    }\n\n    // const state = await randomHex(8);\n    // res.cookie(`auth_${strategy}_${state}`, strategy, {\n    //   maxAge: 10 * 60 * 1000,\n    //   httpOnly: true,\n    //   secure,\n    // });\n\n    const redirectUri = githubAuth.oauth2.authorizationCode.authorizeURL({\n      redirect_uri: createRedirectUri(req),\n      scope: 'read:user,repo',\n      // state,\n      // grant_type: options.grantType,\n      // access_type: options.accessType,\n      // login_hint: req.query.loginHint,\n      // include_granted_scopes: options.includeGrantedScopes,\n    });\n\n    // console.log(redirectUri);\n\n    res.redirect(redirectUri);\n  });\n\n  router.get('/login-response', async (req, res) => {\n    if (req.query.error) {\n      res.send(req.query.error_description);\n      return;\n    }\n\n    const strategy = 'gh';\n    const code: string = req.query.code as string;\n    // const state = req.query.state;\n    // const cookieName = `auth_${strategy}_${state}`;\n    // const cookie = req.cookies && req.cookies[cookieName];\n    // if (!cookie) {\n    //   // res.redirect(`/${strategy}/login`);\n    //   res.send(\n    //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n    //   );\n    //   return;\n    // }\n    // res.clearCookie(cookieName);\n\n    const result = await githubAuth.oauth2.authorizationCode.getToken({\n      code,\n      redirect_uri: createRedirectUri(req),\n    });\n\n    if (!result) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              Could not get access token. <a href=\"/app/login\">Retry ?</a>\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const accessToken = result.access_token;\n    const api = createApi(accessToken);\n    const user = await api.users.getAuthenticated({});\n    const id = user.data.id;\n    const login = user.data.login;\n\n    const authInfo: AuthInfo = { id, login, accessToken, time: Date.now() };\n    const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n      algorithm: 'HS512',\n      audience: req.headers['user-agent'],\n      expiresIn: '10 days',\n    });\n\n    res.cookie(`auth_${strategy}`, token, {\n      httpOnly: true,\n      secure,\n    });\n\n    res.redirect('/app');\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Choose your account</h4>\n                <ul>\n                  <li>\n                    <a href=\"/app/user\">{user.authInfo.login}</a>\n                  </li>\n                  {orgs.data.map((org) => (\n                    <li key={org.id}>\n                      <a href={`/app/org/${org.login}`}>{org.login}</a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?(!)?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://www.npmjs.com/package/@commitlint/config-conventional',\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':vertical_traffic_light: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://www.npmjs.com/package/@commitlint/config-conventional',\n        },\n      },\n      {\n        bot: false,\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        error: {\n          title: 'Title does not have JIRA issue',\n          summary: 'The PR title should end with ONK-0000, or [no issue]',\n        },\n        status: 'jira-issue',\n        statusInfoFromMatch: (match) => {\n          const issue = match[1];\n          if (issue === '[no issue]') {\n            return {\n              title: 'No issue',\n              summary: '',\n            };\n          }\n          return {\n            inBody: true,\n            url: `https://ornikar.atlassian.net/browse/${issue}`,\n            title: `JIRA issue: ${issue}`,\n            summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {\n      /* ops */\n      JulienBreux: `julien.breux${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      TheR3aLp3nGuinJM: `jean-michel${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* back */\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Thierry-girod': `thierry${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      darame07: `kevin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Pixy: `pierre-alexis${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      machartier: `marie-anne${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* front */\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      vlbr: `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'budet-b': `benjamin.budet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      mdcarter: `maxime.dehaye${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      ChibiBlasphem: `christopher${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      PSniezak: `paul.sniezak${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      GaelFerrand: 'gael.ferrand@othrys.dev',\n    },\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Lenamari: `lena${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      loicleser: null,\n    },\n  },\n\n  teams: {\n    ops: {\n      logins: ['JulienBreux', 'Alan-pad', 'CamilSadiki', 'busser'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'Radyum',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n        'PSniezak',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import chrisconfig from './christophehurpeau';\nimport type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n};\nexport default config;\n","import christophehurpeau from './christophehurpeau';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport reviewflow from './reviewflow';\nimport type { Config as ConfigType } from './types';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: { [owner: string]: Config } = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","import type { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { MongoStores } from '../mongo';\nimport type { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import type { Octokit } from '@octokit/core';\nimport type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { MongoStores, Org } from '../../../mongo';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id as any, // TODO _id is number\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  await Promise.all(\n    await github.paginate(\n      github.orgs.listMembers.endpoint.merge({\n        org: org.login,\n      }),\n      ({\n        data,\n      }: RestEndpointMethodTypes['orgs']['listMembers']['response']) => {\n        return Promise.all(\n          data.map(async (member) => {\n            memberIds.push(member.id);\n            return Promise.all([\n              mongoStores.orgMembers.upsertOne({\n                _id: `${org.id}_${member.id}`,\n                org: orgEmbed,\n                user: {\n                  id: member.id,\n                  login: member.login,\n                },\n              }),\n              mongoStores.users.upsertOne({\n                _id: member.id as any,\n                login: member.login,\n                type: member.type,\n              }),\n            ]);\n          }),\n        );\n      },\n    ),\n  );\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","import type { Octokit } from '@octokit/core';\nimport type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { MongoStores } from '../../../mongo';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamIds: number[] = [];\n\n  await Promise.all(\n    await github.paginate(\n      github.teams.list.endpoint.merge({\n        org: org.login,\n      }),\n      ({ data }: RestEndpointMethodTypes['teams']['list']['response']) => {\n        return Promise.all(\n          data.map((team) => {\n            teamIds.push(team.id);\n            return mongoStores.orgTeams.upsertOne({\n              _id: team.id,\n              org: orgEmbed,\n              name: team.name,\n              slug: team.slug,\n              description: team.description,\n            });\n          }),\n        );\n      },\n    ),\n  );\n\n  await mongoStores.orgTeams.deleteMany({\n    'org.id': org.id,\n    _id: { $not: { $in: teamIds } },\n  });\n};\n","import bodyParser from 'body-parser';\nimport type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { accountConfigs } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeams } from '../events/account-handlers/actions/syncTeams';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/org/:org/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const o = await mongoStores.orgs.findByKey(org.id);\n    if (!o) return res.redirect('/app');\n\n    await syncOrg(mongoStores, user.api, o.installationId as number, org);\n    await syncTeams(mongoStores, user.api, org);\n\n    res.redirect(`/app/org/${req.params.org}`);\n  });\n\n  router.get('/org/:org', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const installation = await octokitApp.apps\n      .getOrgInstallation({ org: org.login })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    const accountConfig = accountConfigs[org.login];\n    const userDmSettings = await getUserDmSettings(\n      mongoStores,\n      org.login,\n      org.id,\n      user.authInfo.id,\n    );\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n              <a href=\"/app\">Switch account</a>\n            </div>\n\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Information</h4>\n                {!accountConfig\n                  ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                  : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n              </div>\n              <div style={{ width: '380px' }}>\n                <h4>My DM Settings</h4>\n                {Object.entries(dmMessages).map(([key, name]) => (\n                  <div key={key}>\n                    <label htmlFor={key}>\n                      <span\n                        // eslint-disable-next-line react/no-danger\n                        dangerouslySetInnerHTML={{\n                          __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                            userDmSettings[key as MessageCategory]\n                              ? 'checked=\"checked\" '\n                              : ''\n                          }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                        }}\n                      />\n                      {name}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res) => {\n    if (!req.body) {\n      res.status(400).send('not ok');\n      return;\n    }\n\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    (await mongoStores.userDmSettings.collection).updateOne(\n      {\n        _id: `${org.id}_${user.authInfo.id}`,\n      },\n      {\n        $set: {\n          [`settings.${req.body.key}`]: req.body.value,\n          updated: new Date(),\n        },\n        $setOnInsert: {\n          orgId: org.id,\n          userId: user.authInfo.id,\n          created: new Date(),\n        },\n      },\n      { upsert: true },\n    );\n\n    const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n      orgId: org.id,\n      userId: user.authInfo.id,\n    });\n\n    if (userDmSettingsConfig) {\n      updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n    }\n\n    res.send('ok');\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n): void {\n  router.get('/repositories', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.listForAuthenticatedUser({\n      per_page: 100,\n    });\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>Your repositories</h4>\n            <ul>\n              {data.map((repo: any) => (\n                <li key={repo.id}>\n                  <a href={`/app/repository/${repo.owner.login}/${repo.name}`}>\n                    {repo.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n\n            {data.length === 100 && (\n              <div>We currently have a limit to 100 repositories</div>\n            )}\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.get('/repository/:owner/:repository', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.get({\n      owner: req.params.owner,\n      repo: req.params.repository,\n    });\n\n    if (!data) {\n      res.status(404).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>repo not found</div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    if (!data.permissions || !data.permissions.admin) {\n      res.status(401).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              not authorized to see this repo, you need to have admin permission\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const { data: data2 } = await octokitApp.apps\n      .getRepoInstallation({\n        owner: req.params.owner,\n        repo: req.params.repository,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!data2) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed on this repo. Go to \"}\n              <a\n                href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to add it.\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>{req.params.repository}</h4>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import type { Octokit } from '@octokit/core';\nimport type { MongoStores, User } from '../../../mongo';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/user/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    // const { data: installation } = await api.apps\n    //   .getUserInstallation({\n    //     username: user.authInfo.login,\n    //   })\n    //   .catch((err) => {\n    //     return { status: err.status, data: undefined };\n    //   });\n\n    // console.log(installation);\n\n    const u = await mongoStores.users.findByKey(user.authInfo.id);\n    if (!u || !u.installationId) return res.redirect('/app');\n\n    await syncUser(\n      mongoStores,\n      user.api,\n      u.installationId as number,\n      user.authInfo,\n    );\n\n    res.redirect('/app/user');\n  });\n\n  router.get('/user', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const { data: installation } = await octokitApp.apps\n      .getUserInstallation({\n        username: user.authInfo.login,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    return res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>{process.env.REVIEWFLOW_NAME} is installed for this user</div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import cookieParser from 'cookie-parser';\nimport type { Probot, run } from 'probot';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport repository from './app/repository';\nimport userSettings from './app/user-settings';\nimport type { AppContext } from './context/AppContext';\n\nexport default async function appRouter(\n  app: Probot,\n  getRouter: Parameters<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    Extract<Parameters<typeof run>[0], Function>\n  >[0]['getRouter'],\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = getRouter('/app');\n  const octokitApp = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, octokitApp);\n  home(router, octokitApp, mongoStores);\n  orgSettings(router, octokitApp, mongoStores);\n  userSettings(router, octokitApp, mongoStores);\n}\n","export const ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = (((res: any) => res !== null) as any) as <T>(\n  x: T | null,\n) => x is T;\n","import type { Octokit } from '@octokit/core';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeams } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { Org, User } from '../mongo';\nimport type { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeams(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T extends Record<keyof T, unknown>>(\n  o: T,\n): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import type { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings } from '../dm/getUserDmSettings';\nimport type { Org, User } from '../mongo';\nimport type { AppContext } from './AppContext';\nimport type { SlackMessage } from './SlackMessage';\nimport type { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { getKeys } from './utils';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const slackToken = 'slackToken' in account && account.slackToken;\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<{\n    [login: string]: string;\n  }>((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const slackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, { member: any; im: any }][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([email, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToMemberId = new Map<string, number>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await slackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile?.email;\n        if (email && missingEmails.includes(email)) {\n          members.push([email, { member, im: undefined }]);\n          if (memberEmailToMemberId.has(email)) {\n            mongoStores.orgMembers.partialUpdateMany(\n              {\n                _id: memberEmailToMemberId.get(email),\n              },\n              { $set: { slack: { id: member.id } } },\n            );\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: user.member.id,\n      });\n      user.im = im.channel;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string): string => {\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      githubId: number,\n      githubLogin: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug(\n        {\n          category,\n          githubLogin,\n          message,\n        },\n        'slack: post message',\n      );\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        account.login,\n        account._id,\n        githubId,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return null;\n      const result = await slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug({ ts, channel, message }, 'slack: update message');\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const result = await slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (ts: string, channel: string): Promise<void> => {\n      context.log.debug({ ts, channel }, 'slack: delete message');\n      await slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel, name }, 'slack: add reaction');\n      await slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n\n    updateHome: (githubLogin: string): void => {\n      context.log.debug({ githubLogin }, 'update slack home');\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.octokit, slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n  };\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport type { Org, User, AccountEmbed, AccountType } from '../mongo';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountInfo } from './getOrCreateAccount';\nimport { getOrCreateAccount } from './getOrCreateAccount';\nimport type { TeamSlack } from './initTeamSlack';\nimport { initTeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountType: AccountType;\n  account: Org | User;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    requestedReviewers: any[],\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock: (callback: () => Promise<void> | void) => Promise<void>;\n}\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.octokit,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const slackPromise = initTeamSlack(appContext, context, config, account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  getKeys(config.groups).forEach((groupName) => {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  });\n\n  const githubLoginToTeams = new Map<string, string[]>();\n  getKeys(config.teams || {}).forEach((teamName) => {\n    (config.teams as NonNullable<typeof config.teams>)[teamName].logins.forEach(\n      (login) => {\n        const teams = githubLoginToTeams.get(login);\n        if (teams) {\n          teams.push(teamName);\n        } else {\n          githubLoginToTeams.set(login, [teamName]);\n        }\n      },\n    );\n  });\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    account,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    accountType: accountInfo.type as AccountType,\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info(logInfos, 'lock: try to lock account');\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info(logInfos, 'lock: lock account acquired');\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info(logInfos, 'lock: release account (with error)');\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info(logInfos, 'lock: release account');\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    approveShouldWait: (\n      reviewerGroup,\n      requestedReviewers,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (!reviewerGroup) return false;\n\n      const requestedReviewerGroups = getReviewerGroups(\n        requestedReviewers.map((request) => request.login),\n      );\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return existingAccountContext;\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","import type { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { AccountContext } from '../../../context/accountContext';\nimport { obtainAccountContext } from '../../../context/accountContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  if (!org) return;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange = <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  callback: CallbackContextAndAccountContext<T>,\n) => (context: Context<T>) => {\n  return handlerOrgChange(appContext, context, callback);\n};\n","export type OptionsKeys =\n  | 'featureBranch'\n  | 'autoMergeWithSkipCi'\n  | 'autoMerge'\n  | 'deleteAfterMerge';\n\nexport type Options = Record<OptionsKeys, boolean>;\n\nexport const options: OptionsKeys[] = [\n  'featureBranch',\n  'autoMergeWithSkipCi',\n  'autoMerge',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\nexport const optionsLabels: { key: OptionsKeys; label: string }[] = [\n  { key: 'featureBranch', label: 'This PR is a feature branch' },\n  {\n    key: 'autoMergeWithSkipCi',\n    label: 'Add `[skip ci]` on merge commit',\n  },\n  {\n    key: 'autoMerge',\n    label:\n      'Auto merge when this PR is ready and has no failed statuses. (Also has a queue per repo to prevent multiple useless \"Update branch\" triggers)',\n  },\n  {\n    key: 'deleteAfterMerge',\n    label: 'Automatic branch delete after this PR is merged',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  return optionsRegexps.reduce<any>((acc, { key, regexp }) => {\n    const match = regexp.exec(content);\n    acc[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n    return acc;\n  }, {}) as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import type { PullRequestLabels } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: PullRequestLabels,\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { AutomergeLog } from 'mongo';\nimport type {\n  PullRequestData,\n  PullRequestFromRestEndpoint,\n  PullRequestLabels,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.octokit.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length > 0) {\n    context.log.info(\n      {\n        checks: failedChecks.map((check) => check.name),\n      },\n      `automerge not possible: failed check pr ${pr.id}`,\n    );\n    return true;\n  }\n\n  const combinedStatus = await context.octokit.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(\n      {\n        statuses: failedStatuses.map((status) => status.context),\n      },\n      `automerge not possible: failed status pr ${pr.id}`,\n    );\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  prLabels: PullRequestLabels = pullRequest.labels,\n): Promise<boolean> => {\n  if (reviewflowPrContext === null) return false;\n\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pullRequest.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pullRequest.id,\n    number: pullRequest.number,\n    branch: pullRequest.head.ref,\n  });\n\n  if (pullRequest.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr is not opened',\n    );\n    return false;\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pullRequest.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pullRequest.id} ${type}`);\n    repoContext.appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pullRequest.id,\n        number: pullRequest.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pullRequest.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (pullRequest.requested_reviewers.length > 0) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pullRequest.number)) {\n    context.log.info(\n      {\n        prId: pullRequest.id,\n        prNumber: pullRequest.number,\n        lockedPrNumber: lockedPr.number,\n      },\n      'automerge not possible: locked pr',\n    );\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pullRequest.mergeable == null) {\n    const prResult = await context.octokit.pulls.get(\n      context.repo({\n        pull_number: pullRequest.number,\n      }),\n    );\n    pullRequest = prResult.data;\n  }\n\n  if (pullRequest.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pullRequest.id}, #${pullRequest.number}, mergeable=${pullRequest.mergeable} state=${pullRequest.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pullRequest.mergeable_state === 'clean' ||\n      pullRequest.mergeable_state === 'has_hooks' ||\n      pullRequest.mergeable_state === 'unstable'\n    )\n  ) {\n    if (\n      !pullRequest.mergeable_state ||\n      pullRequest.mergeable_state === 'unknown'\n    ) {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (\n        pullRequest.mergeable_state === 'behind' ||\n        pullRequest.mergeable_state === 'dirty'\n      ) {\n        addLog('rebase-renovate', 'wait');\n\n        // TODO check if has commits not made by renovate https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (pullRequest.body.includes('<!-- rebase-check -->')) {\n          if (pullRequest.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pullRequest.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pullRequest.title.startsWith('rebase!')) {\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              title: `rebase!${pullRequest.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pullRequest.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pullRequest.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pullRequest.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pullRequest.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      context.log.info(\n        {\n          head: pullRequest.head.ref,\n          base: pullRequest.base.ref,\n        },\n        'automerge not possible: update branch',\n      );\n\n      await context.octokit.repos.merge({\n        owner: pullRequest.head.repo.owner.login,\n        repo: pullRequest.head.repo.name,\n        head: pullRequest.base.ref,\n        base: pullRequest.head.ref,\n      });\n\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      `mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pullRequest.number}`);\n\n    const parsedBody = parseBody(\n      reviewflowPrContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.octokit.pulls.merge({\n      merge_method: options.featureBranch ? 'merge' : 'squash',\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      pull_number: pullRequest.number,\n      commit_title: options.featureBranch\n        ? undefined\n        : `${pullRequest.title}${\n            options.autoMergeWithSkipCi ? ' [skip ci]' : ''\n          } (#${pullRequest.number})`,\n      commit_message: options.featureBranch ? undefined : '', // TODO add BC\n    });\n    context.log.debug(mergeResult.data, 'merge result:');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'merged',\n    );\n    return Boolean('merged' in mergeResult.data && mergeResult.data.merged);\n  } catch (err) {\n    context.log.info({ errorMessage: err.message }, 'could not merge:');\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import type { StatusInfo } from 'accountConfigs/types';\nimport type { Options } from './parseBody';\nimport { parseOptions } from './parseBody';\nimport { optionsLabels } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (options: Options) => {\n  return optionsLabels\n    .map(\n      ({ key, label }) =>\n        `- [${options[key] ? 'x' : ' '}] <!-- reviewflow-${key} -->${label}`,\n    )\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length > 0\n    ? `#### Infos:\\n\\n${toMarkdownInfos(infos)}\\n\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos('', defaultOptions, infos);\n};\n\nexport const updateCommentOptions = (\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(commentBody, updatedOptions),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // *  - zero or more\n    // *? - zero or more (non-greedy)\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*?)?(#### Commits Notes:.*?)?(#### Options:.*?)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*?)?(#### Options:)/s,\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (prBody: string): string => {\n  return prBody.replace(\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    '$1$3',\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\n\nexport const createReviewflowComment = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  body: string,\n): Promise<\n  RestEndpointMethodTypes['issues']['createComment']['response']['data']\n> => {\n  return context.octokit.issues\n    .createComment(context.repo({ issue_number: pullRequestNumber, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  commentId: number,\n): Promise<\n  RestEndpointMethodTypes['issues']['getComment']['response']['data'] | null\n> => {\n  return context.octokit.issues\n    .getComment(\n      context.repo({\n        issue_number: pullRequestNumber,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPr } from 'mongo';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nexport interface ReviewflowPrContext {\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport const getReviewflowPrContext = async <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  repoContext: RepoContext,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<ReviewflowPrContext> => {\n  const appContext = repoContext.appContext;\n  const prEmbed = { number: pullRequestNumber };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pullRequestNumber,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(\n      pullRequestNumber,\n      context,\n      existing.commentId,\n    ));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      pullRequestNumber,\n      context,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body };\n};\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { Context } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<RestEndpointMethodTypes['pulls']['get']['response']['data']> => {\n  const prResult = await context.octokit.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description: string;\n  color: string;\n  default: boolean;\n}\n\nexport interface LabelsRecord {\n  [key: string]: LabelResponse;\n}\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<\n  RestEndpointMethodTypes['issues']['listLabelsForRepo']['response']['data']\n> => {\n  const { data: labels } = await context.octokit.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<LabelsRecord> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.octokit.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info(\n        {\n          current_name: existingLabel.name,\n          name: existingLabel.name !== labelConfig.name && labelConfig.name,\n          color: existingLabel.color !== labelColor && labelColor,\n          description: existingLabel.description !== description && description,\n        },\n        'Needs to update label',\n      );\n\n      const result = await context.octokit.issues.updateLabel(\n        context.repo({\n          name: existingLabel.name,\n          new_name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { GroupLabels } from '../accountConfigs/types';\nimport { autoMergeIfPossible } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport type {\n  PullRequestData,\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../events/pr-handlers/utils/PullRequestData';\nimport { getReviewflowPrContext } from '../events/pr-handlers/utils/createPullRequestContext';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountContext } from './accountContext';\nimport { obtainAccountContext } from './accountContext';\nimport type { LabelResponse, LabelsRecord } from './initRepoLabels';\nimport { initRepoLabels } from './initRepoLabels';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  appContext: AppContext;\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: LabelsRecord;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: PullRequestLabels) => boolean;\n  hasRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasChangesRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasApprovesReview: (labels: PullRequestLabels) => boolean;\n  getNeedsReviewGroupNames: (labels: PullRequestLabels) => GroupNames[];\n\n  lockPullRequest: (\n    pullRequest: PullRequestData,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  /** @deprecated */\n  lockPR: (\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  getMergeLockedPr: () => LockedMergePr;\n  addMergeLockPr: (pr: LockedMergePr) => void;\n  removePrFromAutomergeQueue: (\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ) => void;\n  reschedule: (context: Context<any>, pr: LockedMergePr) => void;\n  pushAutomergeQueue: (pr: LockedMergePr) => void;\n}\n\nexport type RepoContext<\n  GroupNames extends string = any\n> = AccountContext<GroupNames> & RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: LabelsRecord,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  if (!shouldIgnore) {\n    reviewGroupNames.forEach((key) => {\n      const reviewGroupLabels = config.labels.review[key] as any;\n      Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n        labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n      });\n    });\n  }\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => requestedReviewLabelIds.includes(label.id));\n  const hasChangesRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => changesRequestedLabelIds.includes(label.id));\n  const hasApprovesReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => approvedReviewLabelIds.includes(label.id));\n\n  const getNeedsReviewGroupNames = (labels: PullRequestLabels): GroupNames[] =>\n    labels\n      .filter((label) => needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOrPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOrPrIssueId,\n        prNumber,\n      };\n      context.log.debug(logInfos, 'lock: try to lock pr');\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info(logInfos, 'lock: lock pr acquired');\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info(logInfos, 'lock: release pr (with error)');\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info(logInfos, 'lock: release pr');\n        release();\n        resolve();\n      });\n    });\n\n  const lockPullRequest = (\n    pullRequest: PullRequestWithDecentData,\n    callback: () => Promise<void> | void,\n  ): Promise<void> => {\n    return lockPR(String(pullRequest.id), pullRequest.number, callback);\n  };\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr): void => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info(pr, 'reschedule');\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const [pullRequest, reviewflowPrContext] = await Promise.all([\n            fetchPr(context, pr.number),\n            getReviewflowPrContext(pr.number, context, repoContext),\n          ]);\n          await autoMergeIfPossible(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n          );\n        });\n      });\n    }, 10_000);\n  };\n\n  return Object.assign(repoContext, {\n    appContext,\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        if (lockMergePr) {\n          context.log(lockMergePr, `merge lock: next ${fullName}`);\n        } else {\n          context.log(`merge lock: nothing next ${fullName}`);\n        }\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log(\n        {\n          repo: fullName,\n          pr,\n          lockMergePr,\n          automergeQueue,\n        },\n        'merge lock: push queue',\n      );\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n    lockPullRequest,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    console.warn(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { OnCallback } from 'probot/lib/application';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { obtainRepoContext } from '../../../context/repoContext';\n\nexport const createRepoHandler = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): OnCallback<T> => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { OnCallback } from 'probot/lib/application';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport type {\n  PullRequestData,\n  PullRequestFromWebhook,\n} from './PullRequestData';\nimport type {\n  CreatePrContextOptions,\n  ReviewflowPrContext,\n} from './createPullRequestContext';\nimport { getReviewflowPrContext } from './createPullRequestContext';\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  pullRequest: T,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends\n    | EventPayloads.WebhookPayloadPullRequest\n    | EventPayloads.WebhookPayloadPullRequestReview\n    | EventPayloads.WebhookPayloadPullRequestReviewComment\n    | EventPayloads.WebhookPayloadIssueComment\n    | EventPayloads.WebhookPayloadPullRequestReviewComment,\n  U extends PullRequestFromWebhook\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => U | null,\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext,\n    reviewflowPrContext: ReviewflowPrContext | null,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPullRequest(pullRequest, async () => {\n      /*\n       * When repo are ignored, only slack notifications are sent.\n       * PR is not linted, commented, nor auto merged.\n       */\n      const reviewflowPrContext = repoContext.shouldIgnore\n        ? null\n        : await getReviewflowPrContext(\n            pullRequest.number,\n            context,\n            repoContext,\n            options.reviewflowCommentPromise,\n          );\n\n      return callbackPr(pullRequest, context, repoContext, reviewflowPrContext);\n    });\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr\n>(\n  appContext: AppContext,\n  getPrs: (payload: Context<T>['payload'], repoContext: RepoContext) => U[],\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checksuiteCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  await context.octokit.repos.createCommitStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const hasPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug({ hasPrCheck, state, description }, 'add status check');\n\n  if (hasPrCheck) {\n    await context.octokit.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME as string,\n        head_sha: pullRequest.head.sha,\n        started_at: pullRequest.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pullRequest.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pullRequest.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  repoContext: RepoContext,\n  labels: PullRequestLabels = pullRequest.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  context.log.debug(\n    {\n      labels: labels.map((l) => l?.name),\n      hasNeedsReview: repoContext.hasNeedsReview(labels),\n      hasApprovesReview: repoContext.hasApprovesReview(labels),\n    },\n    'updateStatusCheckFromLabels',\n  );\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      pullRequest,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (pullRequest.requested_reviewers.length > 0) {\n    return createFailedStatusCheck(\n      // TODO remove `as`\n      // https://github.com/probot/probot/issues/1219\n      `Awaiting review from: ${pullRequest.requested_reviewers\n        .map((rr: any) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    pullRequest,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { GroupLabels } from '../../../accountConfigs/types';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: EventPayloads.PayloadRepository },\n  GroupNames extends string = any\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<PullRequestLabels> => {\n  context.log.debug(\n    {\n      reviewGroup,\n      labelsToAdd,\n      labelsToRemove,\n    },\n    'updateReviewStatus',\n  );\n\n  let prLabels: PullRequestLabels = pullRequest.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(prLabels.map((label) => label.name));\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (\n    key: GroupLabels,\n  ): undefined | PullRequestLabels[number] => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label || prLabels.some((prLabel) => prLabel.id === label.id)) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n\n  repoContext.getTeamsForLogin(pullRequest.user.login).forEach((teamName) => {\n    const team = repoContext.config.teams[teamName];\n    if (team.labels) {\n      team.labels.forEach((labelKey) => {\n        const label = repoContext.labels[labelKey];\n        if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n          newLabelNames.add(label.name);\n          toAdd.add(labelKey);\n          toAddNames.add(label.name);\n        }\n      });\n    }\n  });\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size !== 0 || toDelete.size !== 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          toAddNames: [...toAddNames],\n          toDeleteNames: [...toDeleteNames],\n        },\n        'updateReviewStatus',\n      );\n\n      if (toAdd.size !== 0) {\n        const result = await context.octokit.issues.addLabels(\n          context.issue({\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size !== 0) {\n        for (const toDeleteName of [...toDeleteNames]) {\n          try {\n            const result = await context.octokit.issues.removeLabel(\n              context.issue({\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn(\n              {\n                err: err?.message,\n              },\n              'error removing label',\n            );\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          oldLabels: prLabels.map((l) => l.name),\n          newLabelNames: newLabelNamesArray,\n        },\n        'updateReviewStatus',\n      );\n\n      const result = await context.octokit.issues.setLabels(\n        context.issue({\n          labels: newLabelNamesArray,\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(\n    pullRequest,\n    context,\n    repoContext,\n    prLabels,\n  );\n  // }\n\n  return prLabels;\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (!repoContext.shouldIgnore && reviewflowPrContext) {\n          const repo = context.payload.repository;\n\n          if (pullRequest.merged) {\n            const isNotFork = pullRequest.head.repo.id === repo.id;\n            const options = parseOptions(\n              reviewflowPrContext.commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.octokit.git\n                    .deleteRef(\n                      context.repo({ ref: `heads/${pullRequest.head.ref}` }),\n                    )\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n","import type { KnownBlock } from '@slack/web-api';\nimport type { SlackMessage } from '../../../context/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section',\n  text: {\n    type: 'mrkdwn',\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string | null,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\n\ntype WebhookPr =\n  | EventPayloads.WebhookPayloadPullRequest['pull_request']\n  | EventPayloads.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: EventPayloads.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: EventPayloads.PayloadRepository;\n      issue: EventPayloads.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: EventPayloads.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { Context } from 'probot';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\ninterface Reviewer {\n  id: number;\n  login: string;\n}\n\nexport const getReviewersAndReviewStates = async <GroupNames extends string>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.octokit.paginate(\n    context.octokit.pulls.listReviews,\n    context.pullRequest(),\n    ({\n      data: reviews,\n    }: RestEndpointMethodTypes['pulls']['listReviews']['response']) => {\n      reviews.forEach((review) => {\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({ id: review.user.id, login: review.user.login });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n\n      return [];\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import type { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import slackifyMarkdown from 'slackify-markdown';\n\nexport const slackifyCommentBody = (\n  body: string,\n  multipleLines: boolean,\n): string => {\n  return slackifyMarkdown(\n    body\n      .replace('```suggestion', '_Suggested change:_\\n```suggestion')\n      .replace(\n        '```suggestion\\r\\n```',\n        `_Suggestion to remove line${multipleLines ? 's' : ''}._\\n`,\n      ),\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { SlackMessage } from '../../context/SlackMessage';\nimport type { PostSlackMessageResult } from '../../context/TeamSlack';\nimport type { AccountEmbed } from '../../mongo';\nimport * as slackUtils from '../../slack/utils';\nimport { ExcludesNullish } from '../../utils/Excludes';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { parseMentions } from './utils/parseMentions';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listComments']['response']['data']\n> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.octokit.paginate(\n    context.octokit.pulls.listComments.endpoint.merge(context.pullRequest()),\n    ({\n      data,\n    }: RestEndpointMethodTypes['pulls']['listComments']['response']) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: RestEndpointMethodTypes['pulls']['listComments']['response']['data'],\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: RestEndpointMethodTypes['pulls']['listComments']['response']['data'],\n): { id: number; login: string }[] => {\n  const userIds = new Set<number>();\n  const users: { id: number; login: string }[] = [];\n\n  discussion.forEach((c) => {\n    if (userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const pr = await fetchPr(context, pullRequest.number);\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = pr.user.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers = reviewers.filter(\n          (u) => u.id !== pr.user.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers.filter((rr) => {\n              return (\n                !followers.find((f) => f.id === rr.id) &&\n                rr.id !== comment.user.id &&\n                rr.id !== pr.user.id\n              );\n            }),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== pr.user.id &&\n            u.id !== comment.user.id &&\n            !followers.find((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== pr.user.login &&\n            m !== comment.user.login &&\n            !followers.find((f) => f.login === m) &&\n            !usersInThread.find((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(pr.user.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                pr.user.id === comment.user.id ? 'his' : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyCommentBody(\n          comment.body,\n          (comment as any).start_line !== null,\n        );\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                pr.user.id,\n                pr.user.login,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower.id,\n              follower.login,\n              message,\n            ),\n          ),\n        );\n\n        promisesNotOwner.push(\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage(\n              'pr-comment-thread',\n              user.id,\n              user.login,\n              message,\n            ),\n          ),\n        );\n\n        if (mentions.length > 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    u._id,\n                    u.login,\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\n\nconst updatePrCommentBody = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  await context.octokit.issues.updateComment(\n    context.repo({\n      comment_id: reviewflowPrContext.reviewflowPr.commentId,\n      body: newBody,\n    }),\n  );\n  reviewflowPrContext.commentBody = newBody;\n};\n\nexport const updatePrCommentBodyIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  if (reviewflowPrContext.commentBody !== newBody) {\n    await updatePrCommentBody(context, reviewflowPrContext, newBody);\n  }\n};\n\nexport const updatePrCommentBodyOptions = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    reviewflowPrContext.commentBody,\n    repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody);\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pullRequest.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.octokit.issues.removeLabel(\n      context.issue({ name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.octokit.issues.addLabels(\n      context.issue({ labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestFromRestEndpoint,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pullRequest: PullRequestWithDecentData,\n): Options => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(\n    pullRequest.labels,\n    featureBranchLabel,\n  );\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    featureBranch: prHasFeatureBranchLabel,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<void> => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(\n    pullRequest.labels,\n    featureBranchLabel,\n  );\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    reviewflowPrContext.commentBody,\n    calcDefaultOptions(repoContext, pullRequest),\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, commentBody);\n\n  if (options && (featureBranchLabel || automergeLabel)) {\n    await Promise.all([\n      featureBranchLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.featureBranch,\n          featureBranchLabel,\n          prHasFeatureBranchLabel,\n        ),\n      skipCiLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(\n                pullRequest,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                prLabels,\n              );\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nexport default function prCommentEditedOrDeleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          reviewflowPrContext !== null &&\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n          if (!updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.account._id,\n          'account.type': repoContext.accountType,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages = await appContext.mongoStores.slackSentMessages.findAll(\n          criteria,\n        );\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(sentTo.ts, sentTo.channel),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(\n              slackifyCommentBody(\n                comment.body,\n                (comment as any).start_line !== null,\n              ),\n            ),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                      ...sentMessage.message,\n                      secondaryBlocks,\n                    }),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import type { CommitNote } from '@commitlint/parse';\nimport parse from '@commitlint/parse';\nimport type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport syncLabel from './utils/syncLabel';\n\ninterface BreakingChangesCommits {\n  commit: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'][number];\n  breakingChangesNotes: CommitNote[];\n}\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  commentBody = reviewflowPrContext.commentBody,\n): Promise<void> => {\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await context.octokit.paginate(\n    context.octokit.pulls.listCommits,\n    context.pullRequest({\n      // A custom page size up to 100. Default is 30.\n      per_page: 100,\n    }),\n    (res) => res.data,\n  );\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: BreakingChangesCommits[] = [];\n  conventionalCommits.forEach((c, index) => {\n    const breakingChangesNotes = c.notes.filter(\n      (note) => note.title === 'BREAKING CHANGE',\n    );\n    if (breakingChangesNotes.length > 0) {\n      breakingChangesCommits.push({\n        commit: commits[index],\n        breakingChangesNotes,\n      });\n    }\n  });\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }) =>\n            breakingChangesNotes.map(\n              (note) => `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pullRequest,\n      context,\n      breakingChangesCommits.length !== 0,\n      breakingChangesLabel,\n    ),\n    updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newCommentBody),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n}\n\nconst cleanNewLines = (text: string): string => text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && pullRequest.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(pullRequest.body, update.body);\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      pullRequest.title = update.title as string;\n    }\n    if (hasDiffInBody) {\n      diff.body = update.body;\n      pullRequest.body = update.body as string;\n    }\n\n    await context.octokit.pulls.update(\n      context.repo({\n        pull_number: pullRequest.number,\n        ...diff,\n      }),\n    );\n  }\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { StatusError, StatusInfo } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { updatePrIfNeeded } from './updatePr';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { cleanTitle } from './utils/cleanTitle';\nimport createStatus from './utils/createStatus';\n\ninterface StatusWithInfo {\n  name: string;\n  info: StatusInfo;\n  error?: undefined;\n}\n\ninterface StatusWithError {\n  name: string;\n  error: StatusError;\n  info?: undefined;\n}\n\ntype Status = StatusWithInfo | StatusWithError;\n\nexport const editOpenedPR = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext | null,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  if (reviewflowPrContext === null) return;\n\n  const title = repoContext.config.trimTitle\n    ? cleanTitle(pullRequest.title)\n    : pullRequest.title;\n\n  const isPrFromBot = pullRequest.user.type === 'Bot';\n\n  const statuses: Status[] = [];\n\n  const errorRule = repoContext.config.parsePR.title.find((rule) => {\n    if (rule.bot === false && isPrFromBot) return false;\n\n    const match = rule.regExp.exec(title);\n    if (match === null) {\n      if (rule.status) {\n        statuses.push({ name: rule.status, error: rule.error });\n      }\n      return true;\n    }\n\n    if (rule.status && rule.statusInfoFromMatch) {\n      statuses.push({\n        name: rule.status,\n        info: rule.statusInfoFromMatch(match),\n      });\n      return false;\n    }\n\n    return false;\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises: Promise<unknown>[] = [\n    ...statuses.map(\n      ({ name, error, info }): Promise<void> =>\n        createStatus(\n          context,\n          name,\n          pullRequest.head.sha,\n          error ? 'failure' : 'success',\n          error ? error.title : (info as StatusInfo).title,\n          error ? undefined : (info as StatusInfo).url,\n        ),\n    ),\n    ...(previousSha\n      ? statuses\n          .map(({ name, error, info }): Promise<void> | undefined =>\n            error\n              ? createStatus(\n                  context,\n                  name,\n                  previousSha,\n                  'success',\n                  'New commits have been pushed',\n                )\n              : undefined,\n          )\n          .filter(ExcludesFalsy)\n      : []),\n    hasLintPrCheck &&\n      context.octokit.checks.create(\n        context.repo({\n          name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n          head_sha: pullRequest.head.sha,\n          status: 'completed' as const,\n          conclusion: (errorRule ? 'failure' : 'success') as\n            | 'failure'\n            | 'success',\n          started_at: date,\n          completed_at: date,\n          output: errorRule\n            ? errorRule.error\n            : {\n                title: '✓ Your PR is valid',\n                summary: '',\n              },\n        }),\n      ),\n    !hasLintPrCheck && previousSha && errorRule\n      ? createStatus(\n          context,\n          'lint-pr',\n          previousSha,\n          'success',\n          'New commits have been pushed',\n        )\n      : undefined,\n    !hasLintPrCheck &&\n      createStatus(\n        context,\n        'lint-pr',\n        pullRequest.head.sha,\n        errorRule ? 'failure' : 'success',\n        errorRule ? errorRule.error.title : '✓ Your PR is valid',\n      ),\n  ].filter(ExcludesFalsy);\n\n  const body = removeDeprecatedReviewflowInPrBody(pullRequest.body);\n  promises.push(updatePrIfNeeded(pullRequest, context, { title, body }));\n\n  const commentBodyInfos = statuses\n    .filter((status) => status.info?.inBody)\n    .map((status) => status.info) as StatusInfo[];\n\n  const shouldCreateCommentBody =\n    reviewflowPrContext.commentBody === defaultCommentBody;\n\n  const newBody = shouldCreateCommentBody\n    ? createCommentBody(\n        calcDefaultOptions(repoContext, pullRequest),\n        commentBodyInfos,\n      )\n    : updateCommentBodyInfos(reviewflowPrContext.commentBody, commentBodyInfos);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    promises.push(\n      readCommitsAndUpdateInfos(\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n        newBody,\n      ),\n    );\n  } else {\n    promises.push(\n      updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (reviewflowPrContext == null) return;\n\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        const updatedPullRequest = await fetchPr(\n          context,\n          context.payload.pull_request.number,\n        );\n\n        await editOpenedPR(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n          false,\n        );\n        await autoMergeIfPossible(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\nexport const updateBranch = async (\n  pullRequest: PullRequestWithDecentData,\n  context: Context<any>,\n  login: string,\n): Promise<void> => {\n  context.log.info('update branch', {\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  });\n\n  const result = await context.octokit.repos\n    .merge({\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      head: pullRequest.base.ref,\n      base: pullRequest.head.ref,\n    })\n    .catch((err) => ({ error: err } as any));\n\n  context.log.info(\n    {\n      status: result.status,\n      sha: result.data?.sha,\n      error: result.error,\n    },\n    'update branch result',\n  );\n\n  if (result.status === 204) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch: base already contains the head, nothing to merge.`,\n      }),\n    );\n  } else if (result.status === 409) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch: merge conflict. Please resolve manually.`,\n      }),\n    );\n  } else if (!result || !result.data || !result.data.sha) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch (unknown error)`,\n      }),\n    );\n  } else {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} branch updated: ${result.data.sha}`,\n      }),\n    );\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateBranch } from './actions/updateBranch';\nimport { updatePrCommentBodyOptions } from './actions/updatePrCommentBody';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nconst isFromRenovate = (\n  payload: EventPayloads.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      EventPayloads.WebhookPayloadPullRequest,\n      EventPayloads.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPr = await fetchPr(context, pullRequest.number);\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.octokit.pulls.listReviews(\n              //   context.pullRequest({ per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.octokit.pulls.createReview(\n                context.pullRequest({ event: 'APPROVE' }),\n              );\n\n              let labels = updatedPr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.octokit.issues.addLabels(\n                  context.issue({\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              await updateStatusCheckFromLabels(\n                updatedPr,\n                context,\n                repoContext,\n                labels,\n              );\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMergeWithSkipCi,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMerge,\n                },\n              );\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMerge: true,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                  autoMergeWithSkipCi: hasLabelInPR(\n                    pullRequest.labels,\n                    codeApprovedLabel,\n                  )\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n                },\n              );\n            }\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.octokit.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPr, context, repoContext);\n\n        const updateBranchLabel = repoContext.labels['merge/update-branch'];\n        const featureBranchLabel = repoContext.labels['feature-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (featureBranchLabel && label.id === featureBranchLabel.id) {\n            return 'featureBranch';\n          }\n          if (automergeLabel && label.id === automergeLabel.id) {\n            return 'autoMerge';\n          }\n          if (skipCiLabel && label.id === skipCiLabel.id) {\n            return 'autoMergeWithSkipCi';\n          }\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBodyOptions(\n            context,\n            repoContext,\n            reviewflowPrContext,\n            {\n              [option]: context.payload.action === 'labeled',\n            },\n          );\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pullRequest.number,\n              'automerge label removed',\n            );\n          }\n        }\n        if (updateBranchLabel && label.id === updateBranchLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await updateBranch(\n              updatedPr,\n              context,\n              context.payload.sender.login,\n            );\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  if (hasLabelInPR(pullRequest.labels, codeApprovedLabel)) {\n    await context.octokit.pulls.createReview(\n      context.pullRequest({ event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(\n      pullRequest,\n      context,\n      repoContext,\n      reviewflowPrContext,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\n\nexport const autoAssignPRToCreator = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: E['pull_request'] | PullRequestFromRestEndpoint,\n  context: Context<E>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (pullRequest.assignees.length > 0) return;\n  if (pullRequest.user.type === 'Bot') return;\n\n  await context.octokit.issues.addAssignees(\n    context.issue({\n      assignees: [pullRequest.user.login],\n    }),\n  );\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from 'context/AppContext';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { defaultCommentBody } from './actions/utils/body/updateBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { createReviewflowComment } from './utils/reviewflowComment';\n\nexport default function opened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n        const fromRenovate = pullRequest.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(pullRequest, context, repoContext),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n          fromRenovate\n            ? fetchPr(context, pullRequest.number).then((updatedPr) =>\n                autoApproveAndAutoMerge(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  reviewflowPrContext,\n                ).then(\n                  async (approved: boolean): Promise<void> => {\n                    if (!approved && repoContext.config.requiresReviewRequest) {\n                      await updateReviewStatus(\n                        pullRequest,\n                        context,\n                        repoContext,\n                        'dev',\n                        {\n                          add: ['needsReview'],\n                        },\n                      );\n                    }\n                  },\n                ),\n              )\n            : updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                add: repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n      (pullRequest, context, repoContext) => {\n        return {\n          reviewflowCommentPromise: createReviewflowComment(\n            pullRequest.number,\n            context,\n            defaultCommentBody,\n          ),\n        };\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        await Promise.all([\n          updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n            add: ['needsReview'],\n            remove: ['approved'],\n          }),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewDismissed(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = (context.payload as any).review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            updatedPr.requested_reviewers,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(\n            updatedPr,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                !hasApprovals && 'needsReview',\n                hasApprovals &&\n                  !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'approved',\n              ],\n              remove: [\n                !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'requested',\n                !hasChangesRequestedInReviews && 'changesRequested',\n                !hasApprovals && 'approved',\n              ],\n            },\n          );\n\n          if (updatedPr.assignees) {\n            updatedPr.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !updatedPr.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage(\n                'pr-review',\n                assignee.id,\n                assignee.login,\n                {\n                  text: `:skull: ${repoContext.slack.mention(\n                    reviewer.login,\n                  )} dismissed his review on ${slackUtils.createPrLink(\n                    pullRequest,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          } else {\n            repoContext.slack.postMessage(\n              'pr-review',\n              reviewer.id,\n              reviewer.login,\n              {\n                text: `:skull: ${repoContext.slack.mention(\n                  sender.login,\n                )} dismissed your review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              },\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pullRequest.requested_reviewers,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n                hasChangesRequestedInReviews && 'changesRequested',\n                // if was already approved by another member in the group and has no other requests waiting\n                approved && 'approved',\n              ],\n              // remove labels if has no other requests waiting\n              remove: [\n                approved && 'needsReview',\n                !hasRequestedReviewsForGroup && 'requested',\n              ],\n            },\n          );\n\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pullRequest.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        repoContext.slack.postMessage(\n          'pr-review',\n          reviewer.id,\n          reviewer.login,\n          {\n            text: `:skull_and_crossbones: ${repoContext.slack.mention(\n              sender.login,\n            )} removed the request for your review on ${slackUtils.createPrLink(\n              pullRequest,\n              repoContext,\n            )}`,\n          },\n        );\n\n        const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n          {\n            'account.id': repoContext.account._id,\n            'account.type': repoContext.accountType,\n            type: 'review-requested',\n            typeId: `${pullRequest.id}_${reviewer.id}`,\n          },\n        );\n\n        if (sentMessageRequestedReview) {\n          const sentTo = sentMessageRequestedReview.sentTo[0];\n          const message = sentMessageRequestedReview.message;\n          await Promise.all([\n            repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n              ...message,\n              text: message.text\n                .split('\\n')\n                .map((l) => `~${l}~`)\n                .join('\\n'),\n            }),\n            repoContext.slack.addReaction(\n              sentTo.ts,\n              sentTo.channel,\n              'skull_and_crossbones',\n            ),\n            appContext.mongoStores.slackSentMessages.deleteOne(\n              sentMessageRequestedReview,\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function reviewRequested(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved'],\n            },\n          );\n\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pullRequest.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests your review on ${slackUtils.createPrLink(\n            pullRequest,\n            repoContext,\n          )} !\\n> ${pullRequest.title}`;\n          const message = { text };\n          const result = await repoContext.slack.postMessage(\n            'pr-review',\n            reviewer.id,\n            reviewer.login,\n            message,\n          );\n          if (result) {\n            await appContext.mongoStores.slackSentMessages.insertOne({\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n              message,\n              account: repoContext.accountEmbed,\n              sentTo: [result],\n            });\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { payload } = context;\n\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = payload.review;\n\n        const reviewByOwner = pullRequest.user.login === reviewer.login;\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const followers = reviewers.filter(\n          (user) => user.id !== reviewer.id && user.id !== pullRequest.user.id,\n        );\n\n        if (pullRequest.requested_reviewers) {\n          followers.push(\n            ...pullRequest.requested_reviewers.filter((rr) => {\n              return (\n                !followers.find((f) => f.id === rr.id) &&\n                rr.id !== reviewer.id &&\n                rr.id !== pullRequest.user.id\n              );\n            }),\n          );\n        }\n\n        if (!reviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            reviewflowPrContext &&\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pullRequest.requested_reviewers,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPr = await fetchPr(context, pullRequest.number);\n\n            const newLabels = await updateReviewStatus(\n              updatedPr,\n              context,\n              repoContext,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPr,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                newLabels,\n              );\n            }\n          }\n\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pullRequest.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n            {\n              'account.id': repoContext.account._id,\n              'account.type': repoContext.accountType,\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n            },\n          );\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                ...message,\n                text: message.text\n                  .split('\\n')\n                  .map((l) => `~${l}~`)\n                  .join('\\n'),\n              }),\n              repoContext.slack.addReaction(sentTo.ts, sentTo.channel, emoji),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const ownerMention = repoContext.slack.mention(\n            pullRequest.user.login,\n          );\n\n          const createMessage = (toOwner?: boolean): string => {\n            const ownerPart = toOwner ? 'your PR' : `${ownerMention}'s PR`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown((body as unknown) as string);\n\n          repoContext.slack.postMessage(\n            'pr-review',\n            pullRequest.user.id,\n            pullRequest.user.login,\n            createSlackMessageWithSecondaryBlock(\n              createMessage(true),\n              slackifiedBody,\n            ),\n          );\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          followers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          followers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<EventPayloads.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.find((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Probot, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function synchronize(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (!reviewflowPrContext) return;\n\n        const updatedPr = await fetchPr(context, pullRequest.number);\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(\n            updatedPr,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n            previousSha,\n          ),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPr,\n            context,\n            repoContext,\n            updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\n\nexport default function repoEdited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\n// import commands from 'probot-commands';\nimport type { AppContext } from './context/AppContext';\nimport { syncOrg } from './events/account-handlers/actions/syncOrg';\nimport { syncTeams } from './events/account-handlers/actions/syncTeams';\nimport { createHandlerOrgChange } from './events/account-handlers/utils/handler';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport closedHandler from './events/pr-handlers/closed';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport openedHandler from './events/pr-handlers/opened';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport status from './events/pr-handlers/status';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport repoEdited from './events/repository-handlers/repoEdited';\n\nexport default function initApp(app: Probot, appContext: AppContext): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        await syncOrg(\n          appContext.mongoStores,\n          context.octokit,\n          accountContext.account.installationId as number,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  // /* https://developer.github.com/webhooks/event-payloads/#membership */\n  // app.on(\n  //   ['membership.added', 'membership.removed'],\n  //   createHandlerOrgChange<EventPayloads.WebhookPayloadMembership>(\n  //     mongoStores,\n  //     async (context, accountContext) => {\n  //       await syncTeamMembers(\n  //         mongoStores,\n  //         context.octokit,\n  //         context.payload.organization,\n  //         context.payload.team,\n  //       );\n  //     },\n  //   ),\n  // );\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n\n  /* commands */\n  // commands(app, 'update-branch', () => {});\n}\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { MongoBaseModel } from 'liwi-mongo';\nimport { MongoStore, MongoConnection } from 'liwi-mongo';\nimport type { SlackMessage } from './context/SlackMessage';\nimport type { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\ntype AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\n// TODO _id is number\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\nexport interface Org extends BaseAccount {\n  slackToken?: string;\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: { id: string };\n}\n\nexport interface OrgTeam extends MongoBaseModel<number> {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string;\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB as string],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD as string);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import type { Octokit } from '@octokit/core';\nimport { WebClient } from '@slack/web-api';\nimport type { MongoStores, Org, OrgMember } from '../mongo';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      github.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items\n          .map((pr: any) => {\n            const repoName = pr.repository_url.slice(\n              'https://api.github.com/repos/'.length,\n            );\n            const prFullName = `${repoName}#${pr.number}`;\n\n            return [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `*${createLink(pr.html_url, pr.title)}*`,\n                  //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n                },\n              },\n              {\n                type: 'context',\n                elements: [\n                  {\n                    type: 'mrkdwn',\n                    text: `${createLink(pr.html_url, prFullName)} ${\n                      pr.draft ? '· _Draft_' : ''\n                    }`,\n                  },\n                  {\n                    type: 'image',\n                    image_url: pr.user.avatar_url,\n                    alt_text: pr.user.login,\n                  },\n                  {\n                    type: 'mrkdwn',\n                    text: `${pr.user.login}`,\n                  },\n                ],\n              },\n            ];\n          })\n          .flat(),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 0) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport 'dotenv/config';\nimport { run } from 'probot';\nimport appRouter from './appRouter';\nimport type { AppContext } from './context/AppContext';\nimport initApp from './initApp';\nimport mongoInit from './mongo';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\nrun(({ app, getRouter }) => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, getRouter, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","GITHUB_CLIENT_ID","Error","GITHUB_CLIENT_SECRET","oauth2","create","client","id","secret","auth","tokenHost","tokenPath","authorizePath","Layout","lang","title","REVIEWFLOW_NAME","children","React","padding","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","createApi","accessToken","Octokit","getUser","redirect","api","router","get","redirectUri","githubAuth","authorizationCode","authorizeURL","redirect_uri","scope","query","error","send","error_description","code","result","getToken","renderToStaticMarkup","access_token","user","users","getAuthenticated","data","login","time","Date","now","token","expiresIn","httpOnly","home","orgs","listForAuthenticatedUser","display","flexGrow","map","org","config","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","featureBranch","autoMergeWithSkipCi","autoMerge","deleteAfterMerge","parsePR","regExp","summary","groups","dev","christophehurpeau","tilap","waitForGroups","teams","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","ignoreRepoPattern","autoMergeRenovateWithSkipCi","bot","status","statusInfoFromMatch","match","issue","inBody","url","botUsers","JulienBreux","ORNIKAR_EMAIL_DOMAIN","TheR3aLp3nGuinJM","abarreir","damienorny","darame07","Pixy","machartier","HugoGarrido","CorentinAndre","Mxime","vlbr","mdcarter","ChibiBlasphem","PSniezak","GaelFerrand","design","jperriere","CoralineColasse","Lenamari","loicleser","ops","logins","backends","frontends","description","duplicate","documentation","rfc","bug","enhancement","question","wontfix","chrisconfig","accountConfigs","ornikar","reviewflow","defaultDmSettings","cache","Map","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","userId","newSettings","orgCache","set","getUserDmSettings","mongoStores","orgId","orgDefaultDmSettings","userDmSettingsConfig","userDmSettings","findOne","settings","syncOrg","github","installationId","orgInStore","upsertOne","_id","orgEmbed","memberIds","Promise","all","paginate","listMembers","endpoint","merge","member","push","orgMembers","type","deleteMany","$not","$in","syncTeams","teamIds","team","orgTeams","slug","dmMessages","orgSettings","octokitApp","find","o","params","findByKey","installation","apps","getOrgInstallation","catch","err","width","Object","entries","key","__html","patch","bodyParser","json","body","collection","updateOne","$set","value","updated","$setOnInsert","created","upsert","repository","repos","per_page","repo","owner","length","permissions","admin","data2","getRepoInstallation","syncUser","userInfo","userSettings","u","getUserInstallation","username","appRouter","app","getRouter","use","cookieParser","ExcludesFalsy","Boolean","ExcludesNullish","getOrCreateAccount","accountInfo","getKeys","keys","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","startsWith","emoji","exec","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","initTeamSlack","slackHome","context","account","slackToken","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackEmails","values","slackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","forEach","email","m","slack","im","missingEmails","filter","includes","memberEmailToMemberId","page","profile","has","partialUpdateMany","conversations","open","channel","console","membersMap","getUserFromGithubLogin","githubLogin","category","githubId","message","log","debug","DRY_RUN","chat","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","update","delete","reactions","add","timestamp","scheduleUpdateMember","octokit","initAccountContext","appContext","payload","slackPromise","githubLoginToGroup","githubLoginToTeams","teamName","getReviewerGroups","githubLogins","Set","lock","Lock","accountEmbed","accountType","callback","reject","logInfos","info","createReleaseCallback","release","getReviewerGroup","getTeamsForLogin","approveShouldWait","reviewerGroup","requestedReviewers","includesReviewerGroup","includesWaitForGroups","requestedReviewerGroups","request","some","group","accountContextsPromise","accountContexts","obtainAccountContext","existingAccountContext","existingPromise","promise","then","accountContext","handlerOrgChange","organization","createHandlerOrgChange","options","optionsRegexps","option","regexp","RegExp","optionsLabels","label","parseOptions","content","defaultOptions","parseCommitNotes","commitNotes","replace","trim","parseBody","hasLabelInPR","prLabels","l","hasFailedStatusOrChecks","pr","checks","listForRef","ref","head","sha","failedChecks","check_runs","check","conclusion","combinedStatus","getCombinedStatusForRef","state","failedStatuses","statuses","autoMergeIfPossible","pullRequest","repoContext","reviewflowPrContext","autoMergeLabel","removePrFromAutomergeQueue","number","isRenovatePr","createMergeLockPrFromPr","branch","addLog","action","repoFullName","full_name","automergeLogs","insertOne","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","requested_reviewers","lockedPr","getMergeLockedPr","String","prId","prNumber","lockedPrNumber","pushAutomergeQueue","addMergeLockPr","mergeable","prResult","pulls","pull_number","merged","reschedule","renovateRebaseBody","issues","issue_number","base","parsedBody","commentBody","mergeResult","merge_method","commit_title","commit_message","errorMessage","defaultCommentBody","toMarkdownOptions","join","toMarkdownInfos","infos","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pullRequestNumber","createComment","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPrContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","prs","repoEmbed","existing","partialUpdateByKey","fetchPr","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelKey","labelConfig","labelColor","slice","existingLabel","createLabel","current_name","updateLabel","new_name","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","shouldIgnore","reviewGroupNames","initRepoContext","fullName","repoEmoji","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOrPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","reason","shift","previousLength","p","lockPullRequest","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","warn","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","createPullRequestsHandler","getPrs","checkrunCompleted","on","check_run","pull_requests","updatedPr","checksuiteCompleted","check_suite","createStatus","createCommitStatus","target_url","addStatusCheck","previousSha","hasPrCheck","head_sha","started_at","created_at","completed_at","toISOString","output","updateStatusCheckFromLabels","createFailedStatusCheck","rr","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","addLabels","toDeleteName","removeLabel","newLabelNamesArray","oldLabels","setLabels","closed","pull_request","isNotFork","git","deleteRef","assignees","assignee","createLink","createPrLink","html_url","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getPullRequestFromPayload","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","toUpperCase","reviewStates","dismissed","reviewer","checkIfUserIsBot","checkIfIsThisBot","parse","issueParser","actions","issuePrefixes","parseMentions","mentions","slackifyCommentBody","multipleLines","slackifyMarkdown","getDiscussion","in_reply_to_id","listComments","c","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","slackSentMessages","typeId","sentTo","pull_request_review_id","commentByOwner","followers","f","usersInThread","prUrl","slackUtils","ownerMention","commentLink","createMessage","toOwner","ownerPart","promisesOwner","promisesNotOwner","slackifiedBody","start_line","isBotUser","slackMessage","follower","updatePrCommentBody","newBody","updateComment","updatePrCommentBodyIfNeeded","updatePrCommentBodyOptions","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","response","calcDefaultOptions","featureBranchLabel","automergeLabel","skipCiLabel","prHasFeatureBranchLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","prCommentEditedOrDeleted","sender","closed_at","criteria","sentMessages","sentMessage","readCommitsAndUpdateInfos","commits","listCommits","conventionalCommits","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","diff","cleanTitle","s","arg1","arg2","toLowerCase","editOpenedPR","shouldUpdateCommentBodyInfos","isPrFromBot","errorRule","rule","date","hasLintPrCheck","promises","commentBodyInfos","shouldCreateCommentBody","edited","updatedPullRequest","updateBranch","isFromRenovate","labelsChanged","fromRenovate","codeApprovedLabel","autoMergeSkipCiLabel","createReview","event","updateBranchLabel","autoApproveAndAutoMerge","autoAssignPRToCreator","addAssignees","opened","reviewDismissed","hasChangesRequestedInReviews","hasApprovals","hasRequestedReviewsForGroup","reviewRequestRemoved","requested_reviewer","hasApprovedInReviews","sentMessageRequestedReview","split","deleteOne","reviewRequested","getEmojiFromState","reviewSubmitted","reviewUrl","reviewByOwner","newLabels","isSameBranch","branches","b","synchronize","before","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","MONGO_DB","init","MONGO_HOST","MONGO_PORT","MONGO_USER","MONGO_PASSWORD","connection","MongoConnection","MongoStore","coll","createIndex","unique","$lt","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","flat","views","publish","user_id","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","memberId","scheduleUpdateOrg","cursor","scheduleUpdateAllOrgs","run","mongoInit"],"mappings":"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"}